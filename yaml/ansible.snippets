snippet file "file:"
file:
  path: /some/path
  state: file|directory|absent
  mode: 0770
  recurse: true
  owner: root
  group: developers
endsnippet

snippet copy "copy:"
copy:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0660
  owner: root
  group: developers
endsnippet

snippet template "template:"
template:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0660
  owner: me
  group: developers
endsnippet

snippet synchronize "synchronize:"
synchronize:
    src: /tmp/helloworld
    dest: /var/www/helloword
    rsync_opts:
      - "--exclude=.git"
endsnippet

snippet shell "shell:"
shell: somescript.sh >> somelog.txt
args:
  chdir: /opt/foo
  creates: /usr/bin/bar
endsnippet

snippet uri "uri:"
uri:
  method: POST
  url: http://localhost:3000
  status_code: 200
  body_format: json
  body:
    var1: value1
  timeout: 5
register: health_check_grafana
retries: 10
delay: 1
until: health_check_grafana.status == 200
endsnippet

snippet docker_image "docker_image:"
docker_image:
  name: some_repo/some_image:latest
  force: true
endsnippet

snippet docker_container "docker_container:"
docker_container:
  image: nginx
  name: nginx
  state: started
  restart_policy: on-failure
  detach: false
  cleanup: true
  working_dir: /app
  networks:
    - name: '{{ docker_network_name }}'
  env:
    NODE_ENV: production
  ports:
    - '81:9875'
  volumes:
    - '{{ selfservice_directory }}/nginx.conf:/etc/nginx/nginx.conf'
    - '{{ selfservice_directory }}/selfservice/frontend/dist:/data'
endsnippet

snippet docker_network "docker_network:"
docker_network:
  name: network_name
endsnippet

snippet lineinfile "lineinefile:"
lineinfile:
  path: /some/path
  regexp: 'some regexp'
  line: 'some replacement'
endsnippet

snippet get_url "get_url:"
get_url:
  url: http://example.com/package.tar
  dest: /tmp
  owner: root
  group: developers
  mode: 0440
endsnippet

snippet apt "apt:"
apt:
  name: package
endsnippet

snippet pip "pip:"
pip:
  name: package
  state: absent|forcereinstall|latest|present
  version: 2.6.0
  extra_args: --user
endsnippet

snippet git "git:"
git:
  repo: 'https://foosball.example.org/path/to/repo.git'
  dest: /opt/foosball
  depth: 1
  force: no
  version: HEAD
endsnippet

snippet unarchive "unarchive:"
unarchive:
  src: foo.tgz
  dest: /var/lib/foo
  remote_src: true
  list_files: true
endsnippet

snippet health_check_container "shell: curl"
- name: Health check
  listen: health_check_parity
  changed_when: false
  shell: >
    docker run --rm --net {{ docker_network_name }} byrnedo/alpine-curl
    --fail
    --silent
    -H 'Content-Type: application/json'
    --data '{
      "jsonrpc": "2.0", "method": "net_listening", "params": [], "id": 1
    }'
    http://parity:8545
  register: parity_health_check
  retries: 10
  delay: 1
  until: 'parity_health_check.stdout | from_json | json_query("result") == true'
endsnippet

snippet systemd "systemd:"
systemd:
  name: crond
  state: started|stopped|restarted|reloaded
  enabled: true
  daemon_reload: yes
endsnippet

snippet ansible_ip "ansible_default_ipv4.address"
'{{ ansible_default_ipv4.address }}'
endsnippet

snippet ansible_user "ansible_user_id"
'{{ ansible_user_id }}'
endsnippet

snippet ansible_home "ansible_env.HOME"
'{{ ansible_env.HOME }}'
endsnippet
