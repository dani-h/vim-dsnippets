snippet file "file:"
file:
  # files and directories
  state: directory|absent|file
  path: /some/path
  recurse: true # only valid for directories

  # symlinks
  state: link
  src: /actual/path
  dest: /link/path

  # force the creation of the symlinks in two cases: the source file does not
  # exist (but will appear later); the destination exists and is a file (so, we
  # need to unlink the "path" file and create symlink to the "src" file in place
  # of it).
  force: true

  # general options
  mode: 0770
  owner: root
  group: developers
endsnippet

snippet copy "copy:"
copy:
  src|content: /path/to/src
  dest: /path/to/dest
  remote_src: false
  mode: 0660
  owner: root
  group: developers
endsnippet

snippet template "template:"
template:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0660
  owner: me
  group: developers
endsnippet

snippet synchronize "synchronize:"
synchronize:
    src: /tmp/helloworld
    dest: /var/www/helloword
    rsync_opts:
      - "--exclude=.git"
endsnippet

snippet shell "shell:"
shell: somescript.sh >> somelog.txt
args:
  chdir: /opt/foo
  creates: /usr/bin/bar
  stdin: password
  executable: /bin/zsh
endsnippet

snippet uri "uri:"
uri:
  method: POST
  url: http://localhost:3000
  status_code: 200
  body_format: json
  body:
    var1: value1
  timeout: 5
register: health_check_grafana
retries: 10
delay: 1
until: health_check_grafana.status == 200
endsnippet

snippet docker_image "docker_image:"
docker_image:
  name: some_repo/some_image:latest
  force: true
endsnippet

snippet docker_container "docker_container:"
docker_container:
  image: nginx
  name: nginx
  state: started|stopped|present|absent
  restart: true
  restart_policy: unless-stopped
  entrypoint: [node]
  command: [index.js]
  detach: false
  cleanup: true
  working_dir: /app
  memory: '{{ ansible_memory_mb.real.total * 0.1 }}m'
  cpu_shares: '{{ (1024 * 0.1) | int }}'
  networks:
    - name: '{{ docker_network_name }}'
  env:
    NODE_ENV: production
  ports:
    - '81:9875'
  volumes:
    - '{{ selfservice_directory }}/nginx.conf:/etc/nginx/nginx.conf'
    - '{{ selfservice_directory }}/selfservice/frontend/dist:/data'
endsnippet

snippet docker_service "docker_service:"
notify: health_check_grafana
docker_service:
  project_src: '{{ grafana_dir }}'
endsnippet

snippet docker_service_inline "docker_service:"
notify: health_check_grafana
docker_service:
  project_name: my_services
  definition:
    version: '2'

    services:
      postgresdata:
        image: postgres:9.5
        command: /bin/true

      postgres:
        image: postgres:9.5
        restart: unless-stopped
        env_file:
          - ../postgres.env
        volumes_from:
          - postgresdata

      web:
        image: huginn/huginn-single-process
        restart: always
        ports:
          - "3000:3000"
        env_file:
          - ../postgres.env
          - ../secrets.env
        depends_on:
          - postgres

      threaded:
        image: huginn/huginn-single-process
        command: /scripts/init bin/threaded.rb
        restart: always
        env_file:
          - ../postgres.env
          - ../secrets.env
        depends_on:
          - postgres
          - web
endsnippet

snippet docker_network "docker_network:"
docker_network:
  name: network_name
endsnippet

snippet lineinfile "lineinefile:"
lineinfile:
  path: /some/path
  regexp: 'some regexp'
  line: 'some replacement'
endsnippet

snippet get_url "get_url:"
get_url:
  url: http://example.com/package.tar
  dest: /tmp
  owner: root
  group: developers
  mode: 0660
  force: true
endsnippet

snippet apt "apt:"
apt:
  name: package
endsnippet

snippet apt_repository "apt_repository:"
apt_repository:
  repo: deb http://archive.canonical.com/ubuntu hardy partner
endsnippet

snippet apt_key "apt_key:"
apt_key:
  url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
endsnippet

snippet pip "pip:"
pip:
  name: package
  state: absent|forcereinstall|latest|present
  version: 2.6.0
  extra_args: --user
endsnippet

snippet git "git:"
git:
  repo: 'https://foosball.example.org/path/to/repo.git'
  dest: /opt/foosball
  depth: 1
  force: false
  version: HEAD
endsnippet

snippet unarchive "unarchive:"
unarchive:
  src: foo.tgz
  dest: /var/lib/foo
  remote_src: true
  list_files: true
endsnippet

snippet health_check_httpie "shell: httpie"
listen: health_check_samson_travis_integrator
changed_when: false
shell: >
  docker run --rm --net {{ docker_network_name }} clue/httpie
  http http://samson-travis-integrator/health
register: health_check_samson_travis_integrator
retries: 3
delay: 1
until: health_check_samson_travis_integrator is success
endsnippet

snippet systemd "systemd:"
systemd:
  name: crond
  state: started|stopped|restarted|reloaded
  enabled: true
  daemon_reload: yes
endsnippet

snippet import_role "import_role:"
import_role:
  name: myrole
  tasks_from: tasks.yml
  vars_from: vars.yml
  defaults_from: defaults.yml
vars:
  my_var: my_value
tags: my_tag
endsnippet

snippet hostvars[inventory_hostname] "current host vars"
hostvars[inventory_hostname].my_var
endsnippet

snippet for_host_in_group "loop over hostvars in group"
{% for host in hostvars.groups.mongo -%}
  {
    _id: {{ loop.index }},
    host: '{{ hostvars[host].aws_private_ip }}',

    {% if hostvars[host].is_primary %}
    priority: 2,
    {% endif %}
  },
{% endfor %}
endsnippet

snippet hostname "inventory_hostname"
inventory_hostname
endsnippet

snippet ansible_ip "ansible_default_ipv4.address"
'{{ ansible_default_ipv4.address }}'
endsnippet

snippet play_hosts "play_hosts"
play_hosts
endsnippet

snippet ansible_user "ansible_user_id"
'{{ ansible_user_id }}'
endsnippet

snippet ansible_home "ansible_env.HOME"
ansible_env.HOME
endsnippet

snippet lookup_file "lookup('file', 'myfile.txt')"
lookup('file', 'path/to/file.txt')
endsnippet

snippet lookup_pipe "lookup('pipe', 'date')"
lookup('pipe','date')
endsnippet

snippet default "default('default_value')"
my_variable | default("default_value")
endsnippet

snippet dirname "{{ inventory_dir | dirname }}"
inventory_dir | dirname
endsnippet

snippet role_path "{{ role_path }}"
{{ role_path }}
endsnippet

snippet playbook_dir "{{ playbook_dir }}"
{{ playbook_dir }}
endsnippet

snippet inventory_dir "{{ inventory_dir }}"
{{ inventory_dir }}
endsnippet

snippet ipify_facts "ipify public IP"
ipify_facts:

'{{ ipify_public_ip }}'
endsnippet

snippet ansible_processor_vcpus "ansible_processor_vcpus"
ansible_processor_vcpus
endsnippet

snippet playbook "playbook skeleton"
---
- name: Playbook
  hosts: all
  gather_facts: false
  vars:
    ansible_become: true

  pre_tasks:
    - raw: test -e /usr/bin/python || (apt -y update && apt install -y python)
    - setup:

  tasks:
    - include_role:
        name: users
      tags: users
endsnippet

snippet group "group:"
group:
  name: somegroup
  gid: 1001
  state: present
  system: true
endsnippet

snippet user "user:"
user:
  name: johnd
  uid: 1040
  groups: admin
  append: false
  shell: /bin/zsh
endsnippet

snippet inventory "inventory example"
all:
  hosts:
    mail.example.com:
  children:
    webservers:
      hosts:
        foo.example.com:
        bar.example.com:
    dbservers:
      hosts:
        one.example.com:
        two.example.com:
        three.example.com:
endsnippet

snippet vars_prompt "inventory example"
vars_prompt:
  - name: some_var
    prompt: Some var?
    private: false
    default: 1.0
endsnippet

snippet regex_search "regex_search(regexp, '\1')"
'{{ some_output.stdout | regex_search(regexp, "\1") | first }}'
endsnippet

snippet filesystem "filesystem:"
filesystem:
  fstype: ext4
  dev: '{{ device }}'
  resizefs: true # works for ext2, ext3, ext4, ext4dev, lvm, xfs, vfat
endsnippet

snippet mount "mount:"
mount:
  path: /mnt/storage
  src: '{{ device }}'
  fstype: ext4
  state: mounted|unmounted
endsnippet

snippet npm "npm:"
npm:
  name: typescript
  global: true
endsnippet

snippet gem "gem:"
gem:
  name: travis
  user_install: false
  version: v1.0.0
  pre_release: true
endsnippet

snippet add_host "add host to groups at runtime"
add_host:
  hostname: '{{ new_ip }}'
  groups:
    - group1
    - group2
endsnippet

snippet fail "fail:"
- fail:
    msg: |
      There are no default tasks for role.
      Specify tasks using `tasks_from`.
endsnippet

snippet assert "assert:"
- name: please use 'msg' when ansible version is smaller than 2.7
  assert:
    that:
      - "my_param <= 100"
      - "my_param >= 0"
    msg: "'my_param' must be between 0 and 100"
endsnippet

snippet ansible_memory_mb "ansible instance memory in MB"
ansible_memory_mb.real.total
endsnippet

snippet type_debug "debug an ansible type"
debug: msg='{{ chain_json | type_debug }}'
endsnippet

snippet meta_flush_handlers "meta: flush_handlers"
meta: flush_handlers
endsnippet

snippet end_play "meta: end_play"
meta: end_play
endsnippet

snippet random_uuid "generate a ranom uuid"
{{ 99999999 | random | to_uuid }}
endsnippet

snippet logrotate "example of logrotation"
# Debug logrotation
#     logrotate -d -f /etc/logrotate.conf
# To force logrotation to run:
#     logrotate -f /etc/logrotate.conf
# To create random large files test files (e.g 60mb) use:
#     base64 /dev/urandom | head -c 60000000 >> /var/log/docker_system_prune.log`
# Check crontab logs using
#     tail -f /var/log/syslog
- name: Add log rotation for the docker system prune logs
  tags: cron
  copy:
    content: |
      {{ docker_system_prune_log }} {
        size 10M
        rotate 5
        copytruncate
        missingok
      }
    dest: /etc/logrotate.d/docker_system_prune

- name: Add a cronjob for log rotating the prune logs
  tags: cron
  cron:
    name: logrotate_prune_log
    # hour: 0
    minute: '*'
    job: /usr/sbin/logrotate /etc/logrotate.conf
endsnippet

snippet cron "Ansible cronjobs"
# To see how to setup example cron: https://crontab.guru/
# The crontab is stored in the user cron /var/spool/cron/crontabs/root
tags: cron
cron:
  name: logrotate_prune_log
  hour: 0
  minute: '*'
  job: /usr/sbin/logrotate /etc/logrotate.conf
endsnippet
