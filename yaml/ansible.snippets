snippet file "file:"
file:
  path: /some/path
  state: file|directory|absent
  mode: 0400
  recurse: true
  owner: grafana
  group: grafana
endsnippet

snippet copy "copy:"
copy:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0400
endsnippet

snippet template "template:"
template:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0400
endsnippet

snippet shell "shell:"
shell: somescript.sh >> somelog.txt
args:
  chdir: /opt/foo
  creates: /usr/bin/bar
endsnippet

snippet uri "uri:"
uri:
  method: POST
  url: http://localhost:3000
  status_code: 200
  body_format: json
  body:
    var1: value1
  timeout: 5
register: health_check_grafana
retries: 10
delay: 1
until: health_check_grafana.status == 200
endsnippet

snippet docker_image "docker_image:"
docker_image:
  name: some_repo/some_image:latest
  force: true
endsnippet

snippet docker_container "docker_container:"
docker_container:
  image: nginx
  name: nginx
  state: started
  detach: false
  cleanup: true
  working_dir: /app
  networks:
    - name: '{{ docker_network_name }}'
  env:
    NODE_ENV: production
  ports:
    - '81:9875'
  volumes:
    - '{{ selfservice_directory }}/nginx.conf:/etc/nginx/nginx.conf'
    - '{{ selfservice_directory }}/selfservice/frontend/dist:/data'
endsnippet

snippet docker_network "docker_network:"
docker_network:
  name: network_name
endsnippet

snippet lineinfile "lineinefile:"
lineinfile:
  path: /some/path
  regexp: 'some regexp'
  line: 'some replacement'
endsnippet

snippet get_url "get_url:"
get_url:
  url: http://example.com/package.tar
  dest: /tmp
endsnippet

snippet apt "apt:"
apt:
  name: package
endsnippet

snippet pip "pip:"
pip:
  name: package
endsnippet

snippet git "git:"
git:
  repo: 'https://foosball.example.org/path/to/repo.git'
  dest: /opt/foosball
  depth: 1
  force: no
endsnippet

snippet unarchive "unarchive:"
unarchive:
  src: foo.tgz
  dest: /var/lib/foo
  remote_src: true
  list_files: true
endsnippet
