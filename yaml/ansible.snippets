global !p
import px.snippets
endglobal

snippet file: "file:"
file:
  # files and directories
  state: directory|absent|file
  path: /some/path
  mode: 0770
  owner: root
  group: developers
endsnippet

snippet file_symlink
file:
  state: link
  src: my_file.txt
  dest: /link/path
  force: true
endsnippet

snippet file_dir "filedir"
file:
  state: directory
  path: /some/path
  recurse: true
  mode: 0770
  owner: root
  group: developers
endsnippet

snippet tempfile "Create a temporary file or directory"
- name: create temporary build directory
  register: tempfile_1
  tempfile:
    state: directory|file
    path: /tmp              # optional, uses system default
    prefix: 'ansible.'      # optional, default 'ansible.'
    suffix: build           # optional, default ''

- debug: var=tempfile_1.path
endsnippet

post_jump "px.snippets.expand(snip)"
snippet tmp "Create a temporary directory"
tempfile$1
endsnippet

snippet stat "stat:"
stat:
  path: /tmp/parity.tgz
  get_checksum: true
  checksum_algorithm: md5
register: stat_result

# Usage
# stat_result.stat.checksum

# Usage
# stat_result.stat.exists
endsnippet

snippet copy "copy:"
copy:
  src|content: /path/to/src
  dest: /path/to/dest
  remote_src: false
  mode: 0660
  owner: root
  group: developers
endsnippet

snippet copy:multiple "ansible: copy a dir or multiple files"
synchronize:
  src: some/relative/path
  dest: /some/absolute/path
endsnippet

snippet fetch "Retrieve file from a remote host"
fetch:
  src: /tmp/somefile
  dest: /tmp/prefix-{{ inventory_hostname }}
  flat: true
endsnippet

post_jump "px.snippets.expand(snip)"
snippet copy:from_remote_to_local "Retrieve file from a remote host"
fetch$1
endsnippet

snippet slurp "Read a file on a remote host"
- name: Read the openproject config
  slurp:
    src: '{{ openproject_dir }}/config/configuration.yml'
  register: config_contents_b64

- set_fact:
    config_contents: '{{ config_contents_b64.content | b64decode }}'
endsnippet

post_jump "px.snippets.expand(snip)"
snippet read_remote_file "Read a file on the remote host"
slurp$1
endsnippet

snippet template "template:"
template:
  src: /path/to/src
  dest: /path/to/dest
  mode: 0660
  owner: me
  group: developers
endsnippet

snippet synchronize "synchronize:"
synchronize:
    src: /tmp/helloworld
    dest: /var/www/helloword
    rsync_opts:
      - "--exclude=.git"
endsnippet

snippet shell "shell:"
shell: somescript.sh >> somelog.txt
args:
  chdir: /opt/foo
  creates: /usr/bin/bar
  stdin: password
  executable: /bin/zsh
endsnippet

snippet uri "uri:"
uri:
  method: POST
  url: http://localhost:3000
  status_code: 200
  body_format: json
  body:
    var1: value1
  timeout: 5
  return_content: true
register: health_check_grafana
retries: 10
delay: 1
until: health_check_grafana.status == 200
failed_when: "'AWESOME' not in health_check_grafana.content"
endsnippet

snippet docker_image_pull "docker_image: pull"
docker_image:
  source: pull
  name: some_repo/some_image:latest
  force: true
endsnippet

snippet docker_image_build "docker_image: build"
- name: Build an image and push it to a private repo
  docker_image:
    source: build
    force: true # rebuild if Dockerfile changes
    build:
      path: ./sinatra
      dockerfile: Dockerfile_sinatra
    name: registry.ansible.com/chouseknecht/sinatra
    tag: v1
    push: false
endsnippet

snippet docker_container "docker_container:"
docker_container:
  comparisons:
    '*': strict
  image: nginx
  name: nginx
  state: started|stopped|present|absent
  restart: true
  restart_policy: unless-stopped
  entrypoint: [node]
  command: [index.js]
  detach: false
  cleanup: true
  working_dir: /app
  memory: '{{ ansible_memory_mb.real.total * 0.1 }}m'
  cpu_shares: '{{ (1024 * 0.1) | int }}'
  network_mode: host | default
  networks:
    - name: '{{ docker_network_name }}'
  env:
    NODE_ENV: production
  ports:
    - '81:9875'
  volumes:
    - '{{ selfservice_directory }}/nginx.conf:/etc/nginx/nginx.conf'
    - '{{ selfservice_directory }}/selfservice/frontend/dist:/data'
endsnippet

snippet docker_container_info "Docker inspect a container with Ansible"
- name: Assert that it uses docker networks provided
  register: container_info
  docker_container_info:
    name: openproject

- name: Assert docker container settings
  assert:
    that:
      - "'openproject' in container_info.container.NetworkSettings.Networks"
      - 'container_info.container.HostConfig.RestartPolicy.Name == "unless-stopped"'
endsnippet

post_jump "px.snippets.expand(snip)"
snippet inspect "Docker inspect Ansible"
docker_container_info$1
endsnippet

snippet docker_service "docker_service:"
notify: health_check_grafana
docker_service:
  project_src: '{{ grafana_dir }}'
endsnippet

snippet docker_service_inline "docker_service:"
notify: health_check_grafana
docker_service:
  project_name: my_services
  definition:
    version: '2'

    services:
      postgresdata:
        image: postgres:9.5
        command: /bin/true

      postgres:
        image: postgres:9.5
        restart: unless-stopped
        env_file:
          - ../postgres.env
        volumes_from:
          - postgresdata

      web:
        image: huginn/huginn-single-process
        restart: always
        ports:
          - "3000:3000"
        env_file:
          - ../postgres.env
          - ../secrets.env
        depends_on:
          - postgres

      threaded:
        image: huginn/huginn-single-process
        command: /scripts/init bin/threaded.rb
        restart: always
        env_file:
          - ../postgres.env
          - ../secrets.env
        depends_on:
          - postgres
          - web
endsnippet

snippet docker_network "docker_network:"
docker_network:
  name: network_name
endsnippet

snippet lineinfile "lineinefile:"
lineinfile:
  path: /some/path
  regexp: 'some regexp'
  line: 'some replacement'
  create: true
endsnippet

snippet blockinfile "blockinfile:"
blockinfile:
  path: /some/path
  regexp: 'some regexp'
  create: true
  block: |
    'some replacement'
endsnippet

snippet get_url "get_url:"
get_url:
  url: http://example.com/package.tar
  dest: /tmp
  owner: root
  group: developers
  mode: 0660
  force: true
endsnippet

post_jump "px.snippets.expand(snip)"
snippet download_file "Download file from the internet"
get_url$1
endsnippet

snippet apt "apt:"
apt:
  name: package
  update_cache: true
endsnippet

snippet apt_deb_internet
apt:
  deb: https://example.com/python-ppq_0.1-1_all.deb
endsnippet

snippet apt_update_all_packages ""
apt:
  name: "*"
  state: latest
  update_cache: true
endsnippet

snippet apt_autoremove "apt_autoremove"
apt:
  autoremove: true
endsnippet


snippet apt_repository "apt_repository:"
apt_repository:
  repo: deb http://archive.canonical.com/ubuntu hardy partner
endsnippet

snippet apt_key "apt_key:"
apt_key:
  url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
endsnippet

snippet pip "pip:"
pip:
  name: package
  state: absent|forcereinstall|latest|present
  version: 2.6.0
  extra_args: --user --no-cache-dir
endsnippet

snippet git "git:"
git:
  repo: 'https://foosball.example.org/path/to/repo.git'
  dest: /opt/foosball
  depth: 1
  force: false
  version: HEAD
endsnippet

snippet unarchive "unarchive:"
unarchive:
  src: foo.tgz
  dest: /var/lib/foo
  remote_src: true
  list_files: true
endsnippet

post_jump "px.snippets.expand(snip)"
snippet extract "unarchive:"
unarchive$1
endsnippet

snippet archive "archive:"
archive:
  path: /path/to/foo
  dest: /path/to/foo.tgz
  exclude_path:
    - /opt/parity/password.pwds
    - /opt/parity/network/key'
    - /opt/parity/keys

  # Dest may also explicitly specify what files to archive
  dest:
    - /path/to/foo
    - /path/wong/foo
endsnippet

snippet health_check_httpie "shell: httpie"
listen: health_check_samson_travis_integrator
changed_when: false
shell: >
  docker run --rm --net {{ docker_network_name }} clue/httpie
  http http://samson-travis-integrator/health
register: health_check_samson_travis_integrator
retries: 3
delay: 1
until: health_check_samson_travis_integrator is success
endsnippet

snippet systemd "systemd:"
systemd:
  name: crond
  state: started|stopped|restarted|reloaded
  enabled: true
  daemon_reload: yes
endsnippet

snippet import_role "import_role:"
import_role:
  name: myrole
  tasks_from: tasks.yml
  vars_from: vars.yml
  defaults_from: defaults.yml
vars:
  my_var: my_value
tags: my_tag
endsnippet

snippet import_tasks "import_tasks:"
- name: Import
  import_tasks: stuff.yaml
endsnippet

snippet hostvars[inventory_hostname] "current host vars"
hostvars[inventory_hostname].my_var
endsnippet

snippet for_host_in_group "loop over hostvars in group"
{% for host in hostvars.groups.mongo -%}
  {
    _id: {{ loop.index }},
    host: '{{ hostvars[host].aws_private_ip }}',

    {% if hostvars[host].is_primary %}
    priority: 2,
    {% endif %}
  },
{% endfor %}
endsnippet

snippet hostname "inventory_hostname"
'{{ inventory_hostname }}'
endsnippet

snippet ansible_ip "ansible_default_ipv4.address"
'{{ ansible_default_ipv4.address }}'
endsnippet

snippet ip_address_filter ""
ansible_all_ipv4_addresses | ipaddr(some_range) | max
endsnippet

post_jump "px.snippets.expand(snip)"
snippet private_ip
ip_address_filter$1
endsnippet

snippet play_hosts "play_hosts"
play_hosts
endsnippet

snippet ansible_user "ansible_env.USER"
'{{ ansible_env.USER }}'
endsnippet

snippet ansible_home "ansible_env.HOME"
'{{ ansible_env.HOME }}'
endsnippet

post_jump "px.snippets.expand(snip)"
snippet home "ansible_env.HOME"
ansible_home$1
endsnippet

snippet lookup_template "lookup('template', 'nginx.conf')"
'{{ lookup("template", "nginx.conf") }}'
endsnippet

snippet lookup_file "lookup('file', 'myfile.txt')"
'{{ lookup("file", "file.txt") }}'
endsnippet

snippet lookup_pipe "lookup('pipe', 'date')"
'{{ lookup("pipe", "date") }}'
endsnippet

snippet default "default('default_value')"
my_variable | default("default_value")
endsnippet

snippet dirname "{{ inventory_dir | dirname }}"
inventory_dir | dirname
endsnippet

snippet role_path "{{ role_path }}"
{{ role_path }}
endsnippet

snippet playbook_dir "{{ playbook_dir }}"
{{ playbook_dir }}
endsnippet

snippet inventory_dir "{{ inventory_dir }}"
{{ inventory_dir }}
endsnippet

snippet ipify_facts "ipify public IP"
ipify_facts:

'{{ ipify_public_ip }}'
endsnippet

snippet ansible_processor_vcpus "ansible_processor_vcpus"
ansible_processor_vcpus
endsnippet

snippet playbook "playbook skeleton"
---
- name: Playbook
  hosts: all
  tasks:
    - name: Deploy role
      import_role:
        name: myrole
        tasks_from: tasks.yml
        vars_from: vars.yml
        defaults_from: defaults.yml
      vars:
        my_var: my_value
      tags: my_tag
endsnippet

snippet group "group:"
group:
  name: somegroup
  gid: 1001
  state: present
  system: true
endsnippet

snippet user "user:"
user:
  name: johnd
  uid: 1040
  groups: admin
  # if append is false the user will only be adedd to the mentioned groups
  # if append is true the user will additionally be added to the mentioned
  # groups
  append: false
  shell: /bin/zsh
endsnippet

snippet inventory "inventory example"
all:
  hosts:
    mail.example.com:
  children:
    webservers:
      hosts:
        foo.example.com:
        bar.example.com:
    dbservers:
      hosts:
        one.example.com:
        two.example.com:
        three.example.com:
endsnippet

snippet vars_prompt "inventory example"
vars_prompt:
  - name: some_var
    prompt: Some var?
    private: false
    default: 1.0
endsnippet

snippet regex_search "regex_search(regexp, '\1')"
'{{ some_output.stdout | regex_search(regexp, "\1") | first }}'
endsnippet

snippet filesystem "filesystem:"
filesystem:
  fstype: ext4
  dev: '{{ device }}'
  resizefs: true # works for ext2, ext3, ext4, ext4dev, lvm, xfs, vfat
endsnippet

snippet mount "mount:"
mount:
  path: /mnt/storage
  src: '{{ device }}'
  fstype: ext4
  state: mounted|unmounted
endsnippet

snippet npm "npm:"
npm:
  name: typescript
  global: true
endsnippet

snippet gem "gem:"
gem:
  name: travis
  user_install: false
  version: v1.0.0
  pre_release: true
endsnippet

snippet add_host "add host to groups at runtime"
add_host:
  hostname: '{{ new_ip }}'
  groups:
    - group1
    - group2
endsnippet

snippet fail "fail:"
- fail:
    msg: |
      There are no default tasks for role.
      Specify tasks using `tasks_from`.
endsnippet

snippet assert "assert:"
assert:
  that:
    - my_param <= 100
    - my_param >= 0
  fail_msg: fail
  success_msg: success
endsnippet

snippet ansible_memory_mb "ansible instance memory in MB"
ansible_memory_mb.real.total
endsnippet

snippet type_debug "debug an ansible type"
debug: msg='{{ chain_json | type_debug }}'
endsnippet

snippet meta_flush_handlers "meta: flush_handlers"
meta: flush_handlers
endsnippet

snippet end_play "meta: end_play"
meta: end_play
endsnippet

post_jump "px.snippets.expand(snip)"
snippet exit_play ""
end_play$1
endsnippet

snippet random_uuid "generate a ranom uuid"
{{ 99999999 | random | to_uuid }}
endsnippet

snippet logrotate "example of logrotation"
# Debug logrotation
#     logrotate -d -f /etc/logrotate.conf
# To force logrotation to run:
#     logrotate -f /etc/logrotate.conf
# To create random large files test files (e.g 60mb) use:
#     base64 /dev/urandom | head -c 60000000 >> /var/log/docker_system_prune.log`
# Check crontab logs using
#     tail -f /var/log/syslog
- name: Add log rotation for the docker system prune logs
  tags: cron
  copy:
    content: |
      {{ docker_system_prune_log }} {
        size 10M
        rotate 5
        copytruncate
        missingok
      }
    dest: /etc/logrotate.d/docker_system_prune

- name: Add a cronjob for log rotating the prune logs
  tags: cron
  cron:
    name: logrotate_prune_log
    hour: 0
    minute: 0
    job: /usr/sbin/logrotate /etc/logrotate.conf
endsnippet

snippet cron "Ansible cronjobs"
# To see how to setup example cron: https://crontab.guru/
# The crontab is stored in the user cron /var/spool/cron/crontabs/root
tags: cron
cron:
  name: logrotate_prune_log
  job: /usr/sbin/logrotate >> /var/log/logrotate.log 2>&1

  # "At every 15th minute."
  # Creates an entry like "0 5,2 * * ls -alh > /dev/null"
  minute: '*/15'

  ############################################################

  # time in cron format
  minute: 0-59
  hour: 0-23
  day: 1-31 # day of the month
  weekday: 0-6

  # special times
  special_time: annually | daily | hourly | monthly | reboot | weekly | yearly
endsnippet

snippet yaml_inventory "Yaml inventory file"
all: # keys must be unique, i.e. only one 'hosts' per group
  hosts:
    test2:
      ansible_host: 127.0.0.1
      host_var: value
  vars:
    group_all_var: value
  children:
    other_group:
      vars:
        g2_var2: value3
      hosts:
        test4:
          ansible_host: 127.0.0.1
      children:
        group_x:
          hosts:
            test5   # Note that one machine will work without a colon
  last_group:
    hosts:
      test1 # same host as above, additional group membership
    vars:
      group_last_var: value
endsnippet

snippet requirements_yaml "Ansible requirements yaml"
---
roles:
  - name: geerlingguy.java
    version: 1.9.7

  # from GitHub, overriding the name and specifying a specific tag
  - src: https://github.com/bennojoy/nginx
    version: master
    name: nginx_role

collections:
  - name: community.kubernetes
    version: 0.9.0
endsnippet


snippet assert_variable "Assert role variables required"
- name: 'Check mandatory variables are defined'
  assert:
    that:
      - app_name is defined
      - app_user is defined
      - app_user_group is defined
endsnippet

post_jump "px.snippets.expand(snip)"
snippet required_variable "Assert role variables required"
assert_variable$1
endsnippet

snippet make "Ansible make"
- name: Build 'install' target with extra arguments
  make:
    chdir: /home/ubuntu/cool-project
    target: install|all
    params:
      NUM_THREADS: 4
      BACKEND: lapack

- name: Make default
  make:
    chdir: /home/ubuntu/cool-project
endsnippet

snippet find "Find files that match a specific pattern"
- name: Find files that match a specific pattern
  register: find_files
  find:
    paths: "/var/tmp"
    patterns: "*.old,*.log.gz"
    use_regex: true # (default: false)
    file_type: "file|directory|link (default: file)"

- debug: var=tmp_files.files[0].path
endsnippet

snippet script_python "Executes local python script on remote node"
- name: Run a script using an executable in a system path
  script: /some/local/script.py
  args:
    executable: python3
    chdir: /my/dir
    # creates: /some/file
    # removes: /some/file
endsnippet

snippet script "Executes local script on remote node"
- name: Run a script using an executable in a system path
  script: /some/local/script.sh
  args:
    chdir: /my/dir
    # creates: /some/file
    # removes: /some/file
endsnippet

snippet base64decode ""
{{ encoded | b64decode }}
endsnippet

snippet base64encode ""
{{ decoded | string | b64encode }}
endsnippet

snippet wait_for_tcp_output "Wait for port to open or file to exist"
- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
  wait_for:
    port: 22
    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    search_regex: OpenSSH
    delay: 10 # delay 10s before starting
    timeout: 300
  connection: local
endsnippet

snippet wait_for_file_output "Wait for port to open or file to exist"
- name: Wait until the string "completed" is in the file /tmp/foo before continuing
  wait_for:
    path: /tmp/foo
    search_regex: completed
    timeout: 300
endsnippet

snippet handler "Ansible handler"
- name: Health check openproject
  listen: health_check_openproject
  uri:
    url: http://localhost/api/v3
    status_code: 200
  register: result
  until: result.status == 200
  retries: 300
  delay: 1
endsnippet

snippet k8s_deployment_ansible ""
- name: Create a Service object from an inline definition
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: web
        namespace: testing
        labels:
          app: galaxy
          service: web
      spec:
        selector:
          app: galaxy
          service: web
        ports:
        - protocol: TCP
          targetPort: 8000
          name: port-8000-tcp
          port: 8000
endsnippet

snippet postgres_restore "Restore from a PG dump"
delegate_to: '{{ to_server }}'
postgresql_db:
  login_host: localhost
  login_user: openproject
  login_password: openproject
  name: openproject
  state: restore
  target: '{{ dump_path }}'

# If you need to do a clean restore (drop database and then restore) you need
# to supply the following arguments to postgresql_db when dumping
# postgresql_db:
#   target: '{{ dump_path }}'
#   target_opts: '-F c' # If you wish to overwrite existing tables
endsnippet

snippet ufw
- name: Allow ufw
  community.general.ufw:
    rule: allow
    port: 8300
    from_ip: 10.0.0.0/24
    proto: any
endsnippet

snippet consul_register ""
community.general.consul:
  service_name: nginx
  service_port: 80
  # service_address: 10.0.23.3 # By default, the IP address of the agent is used, and this does not need to be provided.
  http: http://localhost:80/status
  interval: 60s
  # or
  # script: curl http://localhost
  # or
  # tcp: localhost:80
endsnippet

snippet retry ""
retries: 3
delay: 3
register: _health
until: _health.rc == 0
# OR
until: "'AWESOME' not in _health.content"
endsnippet

snippet link ""
file:
  src: path
  dest: path
  state: link
  # Force the creation of the symlinks in two cases: the source file does not
  # exist (but will appear later); the destination exists and is a file (so, we
  # need to unlink the path file and create symlink to the src file in place of
  # it).
  force: true
endsnippet
