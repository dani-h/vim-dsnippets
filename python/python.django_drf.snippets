global !p
import px.snippets
endglobal

snippet serializer_usage_in_apiview "class CommentSerializer(serializers.Serializer)"
from rest_framework import serializers

class CommentSerializer(serializers.Serializer):
    email = serializers.EmailField()
    updated = serializers.CharField()
    created = serializers.DateTimeField()

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        serializer = CommentSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
endsnippet

snippet apiview_example "class MyView(APIView)"
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authentication import SessionAuthentication, TokenAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        qs = serializer.validated_data
        users = User.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        serializer = UserSerializer(data=data)
        serializer.is_valid(raise_exception=True)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
endsnippet


snippet modelserializer "serializers.ModelSerializer"
from rest_framework import serializers

class MySerializer(serializers.ModelSerializer):
    # Using foreign key field
    company_name = serializers.CharField(source="company.name")
    # Using model method
    source = serializers.CharField(source="get_source_name")

    class Meta:
        model = MyModel
        # Serialize specific fields
        fields = ['album_name', 'artist', 'tracks']
        # Use all fields
        fields = '__all__'
        # Exclude certian fields
        exclude = ['users']

        # Model fields which have editable=False set, and AutoField fields will
        # be set to read-only by default
        read_only_fields = ['account_name']
endsnippet

post_jump "px.snippets.expand(snip)"
snippet serilizer_model "serializers.ModelSerializer"
modelserializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet nested_serializer "serializers.ModelSerializer"
modelserializer$1

class RelatedSerializer(serializers.ModelSerializer):
    my_list = MySerializer(many=True)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet serializer_nested "serializers.ModelSerializer"
nested_serializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet drf_nested_serializer "serializers.ModelSerializer"
nested_serializer$1
endsnippet
