global !p
from ultisnips_helpers import *
import px.snippets
endglobal

post_jump "clean_imports()"
snippet serializer_usage_in_apiview "class CommentSerializer(serializers.Serializer)"
from rest_framework import serializers
from rest_framework.permissions import IsAuthenticated, IsAdminUser

class CommentSerializer(serializers.Serializer):
    user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault())
    email = serializers.EmailField()
    updated = serializers.CharField()
    created = serializers.DateTimeField()

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        serializer = CommentSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
endsnippet

post_jump "clean_imports()"
snippet apiview_example "class MyView(APIView)"
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authentication import SessionAuthentication, TokenAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        qs = serializer.validated_data
        users = User.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        serializer = UserSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
endsnippet


post_jump "clean_imports()"
snippet modelserializer "serializers.ModelSerializer"
from rest_framework import serializers

class MySerializer(serializers.ModelSerializer):
    user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault())
    # Using foreign key field
    company_name = serializers.CharField(source="company.name")
    # Using model method
    source = serializers.CharField(source="get_source_name")

    class Meta:
        model = MyModel
        # Serialize specific fields
        fields = ['album_name', 'artist', 'tracks']
        # Use all fields
        fields = '__all__'
        # Exclude certian fields
        exclude = ['users']

        # Model fields which have editable=False set, and AutoField fields will
        # be set to read-only by default
        read_only_fields = ['account_name']

        # When many=True, use this custom bulk serializer
        list_serializer_class = MyModelListSerializer

    def to_internal_value(self, data):
        return super().to_internal_value(data)

    def to_representation(self, instance):
        return super().to_representation(instance)

    def update(self, instance, validated_data):
        super().update(instance, validated_data)

    def create(self, validated_data):
        super().create(validated_data)

    def save(self):
        # Save will call update or create
        email = self.validated_data['email']
        message = self.validated_data['message']
        send_email(from=email, message=message)
        return super().save()
endsnippet


post_jump "clean_imports()"
snippet viewset_generic "Generic Viewset"
from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404
from myapps.serializers import UserSerializer
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import authentication

'''
The GenericViewSet class inherits from GenericAPIView, and provides the default
set of get_object, get_queryset methods and other generic view base behavior,
but does not include any actions by default.

In order to use a GenericViewSet class you'll override the class and either
mixin the required mixin classes, or define the action implementations
explicitly.
'''
class UserViewSet(viewsets.GenericViewSet):
    serializer_class = MySerializer
    authentication_classes = [authentication.SessionAuthentication]

    def list(self, request):
        queryset = User.objects.all()
        serializer = UserSerializer(queryset, many=True)
        return Response(serializer.data)

    def retrieve(self, request, pk=None):
        queryset = User.objects.all()
        user = get_object_or_404(queryset, pk=pk)
        serializer = UserSerializer(user)
        return Response(serializer.data)

    def create(self, request):
        pass

    def update(self, request, pk=None):
        pass

    def partial_update(self, request, pk=None):
        pass

    def destroy(self, request, pk=None):
        pass
endsnippet

snippet retrieveapiview "DRF RetrieveAPIView"
from rest_framework.generics import RetrieveAPIView
from rest_framework.authentication import SessionAuthentication
from rest_framework.permissions import IsAuthenticated

class MyObjectView(RetrieveAPIView):
    queryset = MyModel.objects.all()
    authentication_classes = [SessionAuthentication]
    permission_classes = [IsAuthenticated]
    serializer_class = MySerializer
endsnippet


post_jump "px.snippets.expand(snip)"
snippet detail_apiview "DRF RetrieveAPIView"
retrieveapiview$1
endsnippet


post_jump "px.snippets.expand(snip)"
snippet readonly_modelviewset "viewsets.ReadOnlyModelViewSet"
modelviewset_readonly$1
endsnippet


post_jump "px.snippets.expand(snip)"
snippet serilizer_model "serializers.ModelSerializer"
modelserializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet nested_serializer "serializers.ModelSerializer"
modelserializer$1

class RelatedSerializer(serializers.ModelSerializer):
    my_list = MySerializer(many=True)
endsnippet

snippet serializer ""
endsnippet

post_jump "px.snippets.expand(snip)"
snippet serializer_nested "serializers.ModelSerializer"
nested_serializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet drf_nested_serializer "serializers.ModelSerializer"
nested_serializer$1
endsnippet
