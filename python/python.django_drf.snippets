global !p
import px.snippets
import ast
from collections import namedtuple

def bypass_ultisnips_error(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        snip.buffer._change_tick = int(vim.eval("b:changedtick"))
        return result

    return wrapper

def normalized_imports(contents):
    root = ast.parse(contents)
    for node in ast.iter_child_nodes(root):
        if isinstance(node, ast.Import):
            for n in node.names:
                yield n.name
        elif isinstance(node, ast.ImportFrom):
            module_path = node.module
            for n in node.names:
                yield ".".join([node.module, n.name])

def normalized_import_line(line):
    try:
        return next(normalized_imports(line), None)
    except SyntaxError:
        # We may encounter a syntax error because of lines like class Foo:
        # which are technically incomplete python
        pass

@bypass_ultisnips_error
def clean_imports():
    buffer = vim.current.buffer
    snip_start_line, _ = snip.snippet_start
    snip_end_line, _ = snip.snippet_end
    snippet_contents = "\n".join(snip.buffer[snip_start_line:snip_end_line+1])
    contents_before_snippet = "\n".join(buffer[0:snip_start_line])

    snippet_imports = set(normalized_imports(snippet_contents))
    file_imports = set(normalized_imports(contents_before_snippet))
    missing_imports = snippet_imports.difference(file_imports)

    imports_to_add = []
    for line in buffer[snip_start_line:snip_end_line]:
        if normalized_import_line(line) in missing_imports:
            imports_to_add.append(line)

    # Delete snippet imports
    i = snip_start_line
    while i <= snip_end_line:
        if normalized_import_line(buffer[i]):
            buffer[i] = None
            i -= 1
            snip_end_line -= 1
        i += 1

    # Add missing imports to top
    for import_line in imports_to_add:
        buffer.append(import_line, index=0)

    snip.cursor.preserve()
endglobal

post_jump "clean_imports()"
snippet serializer_usage_in_apiview "class CommentSerializer(serializers.Serializer)"
from rest_framework import serializers

class CommentSerializer(serializers.Serializer):
    email = serializers.EmailField()
    updated = serializers.CharField()
    created = serializers.DateTimeField()

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        serializer = CommentSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
endsnippet

post_jump "clean_imports()"
snippet apiview_example "class MyView(APIView)"
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authentication import SessionAuthentication, TokenAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser

class QuerySetView(APIView):
    authentication_classes = [SessionAuthentication, TokenAuthentication]
    permission_classes = [IsAuthenticated, permissions.IsAdminUser]

    def get(self, request, path_param, format=None):
        serializer = QuerySerializer(request.data)
        serializer.is_valid(raise_exception=True)
        qs = serializer.validated_data
        users = User.objects.all()
        serializer = UserSerializer(users, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        serializer = UserSerializer(data=data)
        serializer.is_valid(raise_exception=True)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
endsnippet


post_jump "clean_imports()"
snippet modelserializer "serializers.ModelSerializer"
from rest_framework import serializers

class MySerializer(serializers.ModelSerializer):
    # Using foreign key field
    company_name = serializers.CharField(source="company.name")
    # Using model method
    source = serializers.CharField(source="get_source_name")

    class Meta:
        model = MyModel
        # Serialize specific fields
        fields = ['album_name', 'artist', 'tracks']
        # Use all fields
        fields = '__all__'
        # Exclude certian fields
        exclude = ['users']

        # Model fields which have editable=False set, and AutoField fields will
        # be set to read-only by default
        read_only_fields = ['account_name']
endsnippet


post_jump "clean_imports()"
snippet viewset "Regular ViewSet"
from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404
from myapps.serializers import UserSerializer
from rest_framework import viewsets
from rest_framework.response import Response

class UserViewSet(viewsets.ViewSet):
    authentication_classes =
    permission_classes
    def list(self, request):
        queryset = User.objects.all()
        serializer = UserSerializer(queryset, many=True)
        return Response(serializer.data)

    def retrieve(self, request, pk=None):
        queryset = User.objects.all()
        user = get_object_or_404(queryset, pk=pk)
        serializer = UserSerializer(user)
        return Response(serializer.data)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet serilizer_model "serializers.ModelSerializer"
modelserializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet nested_serializer "serializers.ModelSerializer"
modelserializer$1

class RelatedSerializer(serializers.ModelSerializer):
    my_list = MySerializer(many=True)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet serializer_nested "serializers.ModelSerializer"
nested_serializer$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet drf_nested_serializer "serializers.ModelSerializer"
nested_serializer$1
endsnippet
