global !p
from ultisnips_helpers import *
import px.snippets

def to_snake_case(s):
    return re.sub('(?!^)([A-Z]+)', r'_\1', s).lower()
endglobal

post_jump "clean_imports(snip)"
snippet reverse "reverse('some-url')"
from django.urls import reverse
reverse("my-url", args=[], kwargs={})
endsnippet

post_jump "clean_imports(snip)"
snippet reverse_lazy "reverse_lazy('some-url')"
from django.urls import reverse_lazy
reverse_lazy("my-url", args=[], kwargs={})
endsnippet

post_jump "clean_imports(snip)"
snippet reverse_admin_changelist ""
from django.urls import reverse
reverse("admin:${1:APP}_${2:MODEL}_changelist")
endsnippet

post_jump "clean_imports(snip)"
snippet reverse_admin_add ""
from django.urls import reverse
reverse("admin:${1:APP}_${2:MODEL}_add")
endsnippet

post_jump "clean_imports(snip)"
snippet reverse_admin_change ""
from django.urls import reverse
reverse("admin:${1:APP}_${2:MODEL}_change", args=[model.id])
endsnippet

snippet migration "django migration"
from django.db import migrations

def forwards(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    model = apps.get_model("jobs", "JobPosting")
    qs = model.objects.using(db_alias)
    qs.filter(job_urls=[None]).update(job_urls=[])

class Migration(migrations.Migration):
    dependencies = [
        ('jobs', '0033_email_to_use_emailfield'),
    ]

    operations = [
        migrations.RunPython(forwards, lambda a, b: None),
    ]
endsnippet

post_jump "clean_imports(snip)"
snippet management_command "django management command"
import logging

from django.core.management.base import BaseCommand

logger = logging.LoggerAdapter(
    logging.getLogger(), extra={
        "app": "myapp",
        "file": __file__,
    }
)

class Command(BaseCommand):
    help = "Command does shit"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            help="Print commands without executing",
            action="store_true",
            default=False,
        )

        parser.add_argument(
            "--id",
            type=int,
            default=1,
            help="id to use"
        )

        parser.add_argument(
            "type",
            help="type of action",
            type=str,
            required=False,
            default="confirmation",
            choices=["confirmation", "subscription"],
        )

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.SUCCESS('Successfully closed poll "%s"' % poll_id))
        self.stdout.write(self.style.NOTICE('notice - A minor error.'))
        self.stdout.write(self.style.WARNING('warning - A warning.'))
        self.stdout.write(self.style.ERROR('error - A major error.'))
        logger.debug("Running command")
        user = User.objects.get(username=kwargs["username"])

        self.stdout.write(self.style.SUCCESS('Migrating users'))
        if kwargs['dry_run']:
            self.stdout.write(self.style.NOTICE('\tdry-run enabled\n'))

        for u in User.objects.filter(conferencecalluser__isnull=False):
            if not kwargs['dry_run']:
                u.conferencecalluser.delete()
                ConferenceCallUser.create(u)
            self.stdout.write(self.style.SUCCESS('Migrated user "%s"' % u.username))

        self.stdout.write(self.style.SUCCESS('\nSuccess'))
endsnippet

post_jump "clean_imports(snip)"
snippet field "Django model field"
from django.db import models
text = models.TextField(
    primary_key=False,
    unique=False,
    unique_for_date=False,
    unique_for_month=False,
    unique_for_year=False,
    max_length=8000,
    default=""
    null=False,
    blank=False,
    default="",
    editable=True,
    help_text="Please use the following format: <strong>YYYY-MM-DD</strong>.",
    validators=[validate_even],
)

BinaryField           # A field to store raw binary data. It can be assigned bytes, bytearray, or memoryview.
BooleanField          # A true/false field.
CharField             # A string field, for small- to large-sized strings.
DateField             # A date, represented in Python by a datetime.date instance.
DateTimeField         # A date and time, represented in Python by a datetime.datetime instance.
DecimalField          # A fixed-precision decimal number, represented in Python by a Decimal instance.
DurationField         # A field for storing periods of time - modeled in Python by timedelta
EmailField            # A CharField that checks that the value is a valid email address using EmailValidator.
FileField             # A file-upload field.
FloatField            # A floating-point number represented in Python by a float instance.
ImageField            # Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.
IntegerField          # An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.
GenericIPAddressField # An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4).
PositiveIntegerField  # Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django.
TextField             # A large text field. The default form widget for this field is a Textarea.
URLField              # A CharField for a URL, validated by URLValidator.
UUIDField             # A field for storing universally unique identifiers.


def validate_even(value):
    if value % 2 != 0:
        raise ValidationError(
            _('%(value)s is not an even number'),
            params={'value': value},
        )
endsnippet

snippet modelchoicefield "forms.ModelChoiceField"
from django import forms
timezone = forms.ModelChoiceField(
  # Determines the value
  queryset=Timezone.objects.values_list('name', flat=True),

  # This optional argument is used to specify the field to use as the value of
  # the choices in the fieldâ€™s widget.
  # By default it is set to None, in which case the primary key of each object
  # will be used.
  to_field_name=None,

  label=_("(Select the Time Zone)"),
  empty_label='--------',
)
endsnippet

snippet choicefield_form ""
status = forms.ChoiceField(
  default=1,
  choices=(
    (1, _("Not relevant")),
    (2, _("Review")),
    (3, _("Maybe relevant")),
    (4, _("Relevant")),
    (5, _("Leading candidate"))
  ),
)
endsnippet

snippet uuid_field "models.UUIDField(primary_key=True)"
models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
endsnippet

snippet choicefield_model "class Status(models.TextChoices)"
from django.db import models

class Status(models.TextChoices):
    UNPUBLISHED = 'UN', 'Unpublished'
    PUBLISHED = 'PB', 'Published'


class Book(models.Model):
    status = models.CharField(
        max_length=2,
        choices=Status.choices,
        default=Status.UNPUBLISHED,
    )
endsnippet

post_jump "px.snippets.expand(snip)"
snippet enum_choice_field "Enum for a model choicefield"
choicefield_model$1
endsnippet

post_jump "clean_imports(snip)"
snippet templateview "class MyView(TemplateView)"
from django.views.generic.base import TemplateView

class HomePageView(TemplateView):
    template_name = "web/home.html"
    http_method_names = ["get", "post"]

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = Article.objects.all()[:5]
        return context
endsnippet


snippet get_context_data "def get_context_data"
def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['latest_articles'] = Article.objects.all()[:5]
    return context
endsnippet

snippet get_form_kwargs_modelform "def get_form_kwargs"
def get_form_kwargs(self):
    """Return the keyword arguments for instantiating the form."""
    kwargs = super().get_form_kwargs()
    if hasattr(self, 'object'):
        kwargs.update({'instance': self.object})
    return kwargs
endsnippet

snippet get_form_kwargs_form_mixin "get_form_kwargs"
def get_form_kwargs(self):
    """Return the keyword arguments for instantiating the form."""
    kwargs = {
        'initial': self.get_initial(),
        'prefix': self.get_prefix(),
    }

    if self.request.method in ('POST', 'PUT'):
        kwargs.update({
            'data': self.request.POST,
            'files': self.request.FILES,
        })
      return kwargs
endsnippet

snippet form_invalid "form_invalid(self, form):"
def form_invalid(self, form):
    """
    If the form is invalid, re-render the context data with the
    data-filled form and errors.

    return self.render_to_response(self.get_context_data(form=form))
    """
    return super().form_invalid(form)
endsnippet


post_jump "clean_imports(snip)"
snippet modelform "forms.ModelForm"
from django import forms

class BookForm(forms.ModelForm):
    non_model_variable = forms.BooleanField()
    field_order = ['username', 'email', 'password']

    class Meta:
        model = Book
        fields = ['name', 'authors']
        labels = {
            'prompt_language': 'Automated Instructions Language'
        }
        help_texts = {
            'prompt_language': 'Djigi'
        }
        widgets = {
            'name': Textarea(attrs={'cols': 80, 'rows': 20}),
        }


    def save(self, commit=True):
        return super().save(commit=False)
        # Now you can use the bound save_m2m method after populating initial
        # data, e.g in form_valid()
        # instance = form.save()
        # instance.new_variable = "hello"
        # instance.save_m2m()


    # Disable uniqueness validation, e.g when using a Create + Update view
    def clean(self):
        self._validate_unique = False
        return self.cleaned_data

    def get_success_message(self, cleaned_data):
        return self.success_message % dict(
            cleaned_data,
            calculated_field=self.object.calculated_field,
        )
endsnippet

post_jump "clean_imports(snip)"
snippet form_crispy "Crispy form with form helper"
from django import forms

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit, Layout, Div

class ContactForm(forms.Form):
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea())
    field_order = ['username', 'email', 'password']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper(self)
        self.disable_csrf = True
        self.helper.form_show_labels = False
        self.helper.form_class = "myform"
        self.helper.form_method = "GET"
        self.helper.form_action = reverse('url_name', args=[event.id])
        self.fields["email"].widget.attrs["placeholder"] = "Email"
        self.fields["message"].widget.attrs["placeholder"] = "Message"
        self.fields["message"].widget.attrs["rows"] = 3
        self.fields['to'].initial = "Hello@world.com"
        self.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"
        self.helper.layout = Layout(
            Div("email"),
            Div(
                "message",
                "employees",
                css_class="button-container d-none d-lg-flex",
            ),
            Submit("submit", "Submit", css_class="btn btn-dark")
        )


    def clean_recipients(self):
        data = self.cleaned_data['recipients']
        if "fred@example.com" not in data:
            raise forms.ValidationError("You have forgotten about Fred!")

        # Always return a value to use as the new cleaned data, even if
        # this method didn't change it.
        return data
endsnippet

snippet form "Django form"
from django import forms

class ContactForm(forms.Form):
    email = forms.EmailField(label='My Email', required=False)
    message = forms.CharField(widget=forms.Textarea())
    field_order = ['message', 'email']

    def clean(self):
        self._validate_unique = False
        return self.cleaned_data

    def clean_email(self):
        data = self.cleaned_data['email']
        if not data.endswith('@honeylogic.io'):
            raise forms.ValidationError('You are not a HoneyLogicer')
        return data
endsnippet

snippet validate_form_field "Django form field validation"
def clean_recipients(self):
    data = self.cleaned_data['recipients']
    if "fred@example.com" not in data:
        raise forms.ValidationError("You have forgotten about Fred!")

    # Always return a value to use as the new cleaned data, even if
    # this method didn't change it.
    return data


def clean(self):
    cleaned_data = super().clean()
    cc_myself = cleaned_data.get("cc_myself")
    subject = cleaned_data.get("subject")

    if cc_myself and subject and "help" not in subject:
        msg = "Must put 'help' in subject when cc'ing yourself."
        self.add_error('cc_myself', msg)
        self.add_error('subject', msg)
endsnippet

post_jump "clean_imports(snip)"
snippet formview "class MyFormView(FormView)"
from django.views.generic.edit import FormView
from django.contrib.messages.views import SuccessMessageMixin
from django.urls import reverse, reverse_lazy

class ContactView(SuccessMessageMixin, FormView):
    template_name = 'myapp/contact.html'
    form_class = ContactForm
    fields = []
    success_url = reverse_lazy('foo:bar')
    initial = {'my_field': 'my_value'}

    # The cleaned data from the form is available for string interpolation using
    # the %(field_name)s syntax.
    success_message = "%(name)s was created successfully"

    def get_initial(self):
        return {'my_field': 'my_value'}

    def get_success_url(self):
        # Redirect to self
        return self.request.path

        # Redirect to another page
        return reverse('foo:bar', args=[self.request.something])

    def get_form_class(self):
        return self.form_class

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.fields['number'].label = 'Hello'
        return form

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        form.send_email()

        # Modify the success_url on the fly
        self.success_url = reverse('leaderboard', board_name=board_name)
        # Always redirect on POST
        # https://stackoverflow.com/questions/1083357/do-you-always-redirect-after-post-if-yes-how-do-you-manage-it
        return super().form_valid(form)

    def form_invalid(self, form):
        return super().form_invalid(form)

    def get_success_message(self, cleaned_data):
        return self.success_message % dict(
            cleaned_data,
            calculated_field=self.object.calculated_field,
        )

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = 'hello'
        return context
endsnippet

snippet render_to_response "FormView render_to_response"
return self.render_to_response(self.get_context_data(form=form))
endsnippet

snippet get_initial ""
def get_initial(self):
    return {'template_path': 'hello'}
endsnippet

snippet get_success_message "def get_success_message(self, cleaned_data)"
success_message = _(
    "You have successfully sent your %(title)s to "
    "%(emails)s by Email"
)

def get_success_message(self, cleaned_data):
    emails = ', '.join(cleaned_data['recipients'])
    return self.success_message % dict(
        **cleaned_data,
        emails=emails
    )
endsnippet

snippet get_messages "Get messages in tests"
from django.contrib.messages import get_messages
# For redirects
messages = [msg for msg in get_messages(res.wsgi_request)]
# For non-redirect responses you can use
res.context['messages']
endsnippet

post_jump "px.snippets.expand(snip)"
snippet messages_get "Get messages in tests"
get_messages$1
endsnippet

snippet clean "def clean(self) # clean form"
def clean(self):
    data = super().clean()

    # Raise a general error
    raise forms.ValidationError(
        "Did not send for 'help' in the subject despite "
        "CC'ing yourself."
    )

    # Add a specific error
    self.add_error('cc_myself', msg)

    return data
endsnippet

snippet clean_field "def clean_field(self)"
def clean_recipients(self):
    data = self.cleaned_data['recipients']
    if "fred@example.com" not in data:
        raise ValidationError("You have forgotten about Fred!")

    # Always return a value to use as the new cleaned data, even if
    # this method didn't change it.
    return data
endsnippet

post_jump "clean_imports(snip)"
snippet "templateview" "class HomePageView(TemplateView):"
from django.views.generic.base import TemplateView

from articles.models import Article

class HomePageView(TemplateView):
    template_name = "home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = Article.objects.all()[:5]
        return context
endsnippet

snippet redirect "from django.shortcuts import redirect"
from django.shortcuts import redirect
def my_view(request):
    ...
    obj = MyModel.objects.get(...)
    return redirect(obj)
endsnippet

snippet render "from django.shortcuts import render"
from django.shortcuts import render
return render(
    request,
    'contribute/_membership-thank-you.html',
    context=ctx,
    content_type=None,
    status=None,
)
endsnippet

post_jump "clean_imports(snip)"
snippet redirectview "class MyRedirectView(RedirectView):"
from django.shortcuts import get_object_or_404
from django.views.generic.base import RedirectView

from articles.models import Article

class ArticleCounterRedirectView(RedirectView):
    permanent = False
    url = reverse_lazy("my_view")
    query_string = True # Pass on query strings in the redirect
    pattern_name = 'article-detail'

    # If `url` is not specified, dynamically call this method.
    def get_redirect_url(self, *args, **kwargs):
        article = get_object_or_404(Article, pk=kwargs['pk'])
        article.update_counter()
        # return "https://foo"
        return super().get_redirect_url(*args, **kwargs)
endsnippet

snippet 404_get_object_or_404 ""
from django.shortcuts import get_object_or_404
def my_view(request):
    obj = get_object_or_404(MyModel, pk=1)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet get_object_or_404 ""
404_get_object_or_404$1
endsnippet

post_jump "clean_imports(snip)"
snippet json_dumps_django "json.dumps(list(qs), cls=DjangoJSONEncoder)"
import json
from django.core.serializers.json import DjangoJSONEncoder
data = json.dumps(list(qs), cls=DjangoJSONEncoder)
endsnippet

post_jump "clean_imports(snip)"
snippet createview "class AuthorCreate(CreateView)"
from django.views.generic.edit import CreateView
from django.contrib.auth.mixins import LoginRequiredMixin
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from crispy_forms.layout import Div, Layout
from django.utils import timezone
from django.contrib.messages.views import SuccessMessageMixin
from myapp.models import Author

class AuthorCreate(SuccessMessageMixin, LoginRequiredMixin, CreateView):
    model = Author
    fields = ['name']
    success_message = "%(calculated_field)s was created successfully"

    # template_name = "jobs/jobposting_new.html"
    # form_class = JobPostingForm
    # success_url = reverse_lazy("jobs-payment")
    # initial = {}

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.helper = FormHelper()
        form.helper.add_input(Submit('submit', 'Create', css_class='btn-primary'))
        form.disable_csrf = True
        form.helper.form_show_labels = False
        form.helper.form_class = "myform"
        form.helper.form_method = "GET"
        form.helper.form_action = reverse('url_name', args=[event.id])
        form.fields["email"].widget.attrs["placeholder"] = "Email"
        form.fields["message"].widget.attrs["placeholder"] = "Message"
        form.fields["message"].widget.attrs["rows"] = 3
        form.fields['to'].initial = "Hello@world.com"
        form.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"

        form.helper.layout = Layout(
            Div("search"),
            Div(
                "glassdoor_rating__gte",
                "funding",
                "employees",
                css_class="button-container d-none d-lg-flex",
            ),
            Submit("submit", "Submit", css_class="btn btn-info")
        )
        return form

    def form_valid(self, form):
        """If the form is valid, redirect to the supplied URL."""
        author = form.save(commit=False)
        author.date = timezone.now()
        author.save()
        return super().form_valid(form)

    def get_success_message(self, cleaned_data):
        return self.success_message % dict(
            cleaned_data,
            calculated_field=self.object.calculated_field,
        )

    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        return self.render_to_response(self.get_context_data(form=form))

    def get_success_url(self):
        """Return the URL to redirect to after processing a valid form."""
        if not self.success_url:
            raise ImproperlyConfigured("No URL to redirect to. Provide a success_url.")
        return str(self.success_url)  # success_url may be lazy
endsnippet


post_jump "clean_imports(snip)"
snippet updateview "class AuthorUpdateView(UpdateView)"
from django.views.generic.edit import UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.utils import timezone
from django.contrib.messages.views import SuccessMessageMixin
from myapp.models import Author

class AuthorUpdate(SuccessMessageMixin, LoginRequiredMixin, UpdateView):
    model = Author
    fields = ['name']
    template_name = "jobs/jobposting_new.html"
    form_class = JobPostingForm
    success_url = reverse_lazy("jobs-payment")
    initial = {}
    success_message = "%(name)s was created successfully"


    # If you are using this view without a PK in the url, set the PK explicitly
    def get_object(self):
        return Author.objects.get(pk=self.request.GET.get('pk'))

    def get_initial(self):
        initial = super().get_initial()
        initial['dataset_request'] = self.object
        initial['company_name'] = self.object.company.name
        return initial

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.disable_csrf = True
        form.fields["email"].widget.attrs["placeholder"] = "Email"
        form.fields["message"].widget.attrs["placeholder"] = "Message"
        form.fields["message"].widget.attrs["rows"] = 3
        form.fields['to'].initial = "Hello@world.com"
        form.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"
        return form

    def form_valid(self, form):
        """If the form is valid, redirect to the supplied URL."""
        author = form.save(commit=False)
        author.date = timezone.now()
        author.save()
        return super().form_valid(form)

    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        return self.render_to_response(self.get_context_data(form=form))

    def get_success_message(self, cleaned_data):
        return self.success_message % dict(
            cleaned_data,
            calculated_field=self.object.calculated_field,
        )

    def get_success_url(self):
        # Redirect to self
        return self.request.path

        # Redirect to another page
        return reverse('foo:bar', args=[self.request.something])
endsnippet

post_jump "clean_imports(snip)"
snippet detailview "class AppDetailView(DetailView)"
from django.views.generic.detail import DetailView

class JobsDetailView(DetailView):
    template_name = "jobs/jobposting_detail.html"
    queryset = JobPosting.valid_jobs.prefetch_related("company")

    def get_context_data(self, *, _=None, **kwargs):  # pylint: disable=arguments-differ
        context = super().get_context_data()
        return context
endsnippet

post_jump "clean_imports(snip)"
snippet login_required "@login_required"
from django.contrib.auth.decorators import login_required

@login_required
endsnippet

snippet update_or_create "Person.objects.update_or_create"
obj, created = Person.objects.update_or_create(
    first_name='John', last_name='Lennon',
    defaults={'first_name': 'Bob'},
)
endsnippet

post_jump "clean_imports(snip)"
snippet listview "class ArticleList(ListView)"
from django.views.generic.list import ListView
from articles.models import Article

class ArticleListView(ListView):
    model = Article
    # queryset = Article.objects.filter(foo="bar")
    paginate_by = 100  # if pagination is desired

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['now'] = timezone.now()
        return context

    def get_queryset(self):
        return Article.objects.filter(foo="bar")
endsnippet

post_jump "clean_imports(snip)"
snippet signal_receiver "Signal receiver function"
# List of common signals
## Save
# - django.db.models.signals.pre_save
# - django.db.models.signals.post_save
## Delete
# - django.db.models.signals.pre_delete
# - django.db.models.signals.post_delete
## Requests
# - django.core.signals.request_finished
## Allauth
# - allauth.account.signals.user_signed_up(request, user)
# - allauth.account.signals.user_logged_in(request, user)
# - allauth.account.signals.user_logged_out(request, user)

from django.dispatch import receiver

# Listen to signals emitted from any model
@receiver(request_finished)
def my_callback(sender, **kwargs):
    print("Request finished!")

# Listen for signals associated by a specific model
@receiver(request_finished, sender=MyModel)
def my_callback(sender, instance=None, signal=None, **kwargs):
    print("Request finished!")
endsnippet

post_jump "clean_imports(snip)"
snippet foreign_key "models.ForeignKey()"
from django.db import models

# Before using foreinkey, consider if it's a OneToOne relationship
`!p snip.rv = to_snake_case(t[1])` = models.ForeignKey(
  ${1:MyModel},
  on_delete=models.CASCADE,
  related_name="tags",
  related_query_name="tag",
)
endsnippet

post_jump "clean_imports(snip)"
snippet foreign_key "models.ForeignKey()"
from django.db import models

# If you do not specify the related_name argument for the OneToOneField, Django
# will use the lowercase name of the current model as default value.
`!p snip.rv = to_snake_case(t[1])` = models.OneToOneField(
  ${1:MyModel},
  on_delete=models.CASCADE,
  related_name="tags",
)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet models.ForeignKey "models.ForeignKey()"
foreign_key$1
endsnippet

post_jump "clean_imports(snip)"
snippet user "User = get_user_model()"
from django.contrib.auth import get_user_model
User = get_user_model()
endsnippet

post_jump "px.snippets.expand(snip)"
snippet get_user_model "User = get_user_model()"
user$1
endsnippet

post_jump "clean_imports(snip)"
snippet timestampedmodel "class MyModel(TimeStampedModel)"
from model_utils.models import TimeStampedModel
class MyModel(TimeStampedModel):
    pass
endsnippet

snippet shell_plus_pre_imports "SHELL_PLUS_PRE_IMPORTS"
SHELL_PLUS_PRE_IMPORTS = [
    ("ninjads.web.facebook", ("get_ad_user", "get_api")),
]
endsnippet

snippet get_or_create "Person.objects.get_or_create"
# Either gets a person with the first_name and last_name
# Or creates a person with first_name, last_name and the defaults
# If you want an exact creation, omit the defaults

obj, created = Person.objects.get_or_create(
    first_name='John',
    last_name='Lennon',
    defaults={'birthday': date(1940, 10, 9)},
)
endsnippet

snippet object_does_not_exist "try / catch ObjectDoesNotExist"
from django.core.exceptions import ObjectDoesNotExist

try:
    user = User.objects.get(username='foo')
except ObjectDoesNotExist:
    pass
endsnippet

post_jump "px.snippets.expand(snip)"
snippet try_object_does_not_exist "try / catch ObjectDoesNotExist"
object_does_not_exist$1
endsnippet


snippet send_mail "Send email in Django"
from django.core.mail import send_mail

send_mail(
    subject='Subject here',
    message='Here is the message.',
    from_email='from@example.com',
    recipient_list=['to@example.com'],
    fail_silently=False,
    html_message='<div>Here is the message.</div>',
)
endsnippet

snippet message_info "messages.info"
from django.contrib import messages
messages.info(self.request, 'Three credits remain in your account.')
endsnippet

snippet message_success "messages.success"
from django.contrib import messages
messages.success(self.request, 'Profile details updated.')
endsnippet

snippet message_warning "messages.warning"
from django.contrib import messages
messages.warning(self.request, 'Your account expires in three days.')
endsnippet

snippet message_error "messages.error"
from django.contrib import messages
messages.error(self.request, 'Error.')
endsnippet

snippet assertTemplateUsed "assertTemplateUsed"
from pytest_django import asserts
# The count argument is an integer indicating the number of times the template
# should be rendered. Default is None, meaning that the template should be
# rendered one or more times.
assertTemplateUsed(res, template_name, msg_prefix='', count=None)
endsnippet

snippet assertContains ""
from pytest_django import asserts
asserts.assertContains(
    response,
    text,
    count=None,
    status_code=200,
    msg_prefix='',
    html=False
)
endsnippet

snippet assertNotContains ""
from pytest_django.asserts import assertNotContains
assertNotContains(
    response,
    text,
    status_code=200,
    msg_prefix='',
    html=False
)
endsnippet

snippet assertRedirects ""
from pytest_django.asserts import assertRedirects

# Remember to use follow=True if you want to assert on redirect response context
self.client.get(self.url, payload, follow=True)

# Asserts that the response returned a status_code redirect status, redirected
# to expected_url (including any GET data), and that the final page was
# received with target_status_code.
assertRedirects(
    res,
    expected_url,
    status_code=302,
    target_status_code=200,
    msg_prefix='',
    fetch_redirect_response=True,
)
endsnippet

snippet assertNumQueries "Django assertNumQueries"
from pytest_django.asserts import assertNumQueries

# Asserts that when func is called with *args and **kwargs that num database
# queries are executed.
with assertNumQueries(2):
    Person.objects.create(name="Aaron")
    Person.objects.create(name="Daniel")
endsnippet

snippet assertFormError "Django assertFormError"
from pytest_django.asserts import assertFormError

# Asserts that a field on a form raises the provided list of errors when rendered
# on the form.
#
# form is the name the Form instance was given in the template context.
#
# field is the name of the field on the form to check. If field has a value of
# None, non-field errors (errors you can access via form.non_field_errors()) will
# be checked.
#
# errors is an error string, or a list of error strings, that are expected as a
# result of form validation.

assertFormError(
  res,
  'form',
  'recipients',
  ['The email address invalid is invalid'],
  msg_prefix=''
)
endsnippet

snippet assertHTMLEqual "Django assertHTMLEqual"
from pytest_django.asserts import assertHTMLEqual

assertHTMLEqual(
    '<input type="checkbox" checked="checked" id="id_accept_terms" />',
    '<input id="id_accept_terms" type="checkbox" checked>'
)
endsnippet

snippet assertInHTML "Django assertInHTML"
from pytest_django.asserts import assertInHTML
assertInHTML("<div class='hello'>", res.content, count=None, msg_prefix='')

# If that doesn't work, use

import re
from bs4 import BeautifulSoup
soup = BeautifulSoup(res.content, 'html.parser')
assert soup.find('a', text=re.compile(self.call.created_at.strftime("%m/%d/%Y")))
endsnippet

post_jump "clean_imports(snip)"
snippet assert_message "Assert message in response"
messages = [m.message for m in res.context['messages']]
self.assertIn('My message', messages)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet message_assert "Assert message in response"
assert_message$1
endsnippet

snippet refresh_from_db "mymodel.refresh_from_db()"
mymodel.refresh_from_db()
endsnippet

post_jump "px.snippets.expand(snip)"
snippet reload_from_db "mymodel.refresh_from_db()"
refresh_from_db$1
endsnippet

snippet mailoutbox "Test emails in Django"
from django.core import mail
self.assertEqual(len(mail.outbox), 1)
email = mail.outbox[0]
self.assertEqual(email.to, ['contact@test.com'])
self.assertEqual(email.bcc, ['marketing_email@webtel.mobi'])
self.assertEqual(email.subject, 'My Subject')
self.assertEqual(email.body, 'My Body')
self.assertEqual(email.alternatives, [('<h1>Hello<h/1>', 'text/html')])
self.assertEqual(email.attachments, [
  (pdf.name, b'content', pdf.content_type)
])
endsnippet

snippet attachment_email "Add django-attachments attachment"
from attachments.models import Attachment
attachments = Attachment.objects.attachments_for_object(email)
for attachment in attachments:
    email.attach_file(attachment.attachment_file.path)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet email_attachment "Add django-attachments attachment"
attachment_email$1
endsnippet

snippet attachment_test_send_pdf_admin ""
from django.core.files.uploadedfile import SimpleUploadedFile

pdf = SimpleUploadedFile(
    "file.pdf",
    b"content",
    content_type="application/pdf"
)

prefix = "attachments-attachment-content_type-object_id"
res = client.post(reverse("admin:core_marketingmessage_add"), {
    "title": "Title",
    f"{prefix}-INITIAL_FORMS": 0,
    f"{prefix}-TOTAL_FORMS": 1,
    f"{prefix}-MIN_NUM_FORMS": 0,
    f"{prefix}-MAX_NUM_FORMS": 1000,
    f"{prefix}-0-creator": client.user.uuid,
    f"{prefix}-0-attachment_file": pdf,
})
self.assertRedirects(res, reverse("admin:core_marketingmessage_changelist"))
self.assertEqual(mail.outbox[0].attachments, [
  (pdf.name, b'content', pdf.content_type),
])
endsnippet

snippet test_post_django_file ""
from django.core.files.uploadedfile import SimpleUploadedFile

def test_upload_video(self):
    video = SimpleUploadedFile("file.mp4", b"binary content", content_type="video/mp4")
    self.client.post(reverse('app:some_view'), {'video': video})
endsnippet
