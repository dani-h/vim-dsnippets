snippet reverse "reverse('some-url')"
from django.urls import reverse
reverse("my-url", args=[], kwargs={})
endsnippet

snippet migration "django migration"
from django.db import migrations

def forwards(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    model = apps.get_model("jobs", "JobPosting")
    qs = model.objects.using(db_alias)
    qs.filter(job_urls=[None]).update(job_urls=[])

class Migration(migrations.Migration):
    dependencies = [
        ('jobs', '0033_email_to_use_emailfield'),
    ]

    operations = [
        migrations.RunPython(forwards, lambda a, b: None),
    ]
endsnippet

snippet management_command "django management command"
import logging

from django.core.management.base import BaseCommand

logger = logging.LoggerAdapter(
    logging.getLogger(), extra={
        "app": "myapp",
        "file": __file__,
    }
)

class Command(BaseCommand):
    help = "Command does shit"

    def add_arguments(self, parser):
        parser.add_argument(
            "--id",
            type=int,
            default=1,
            help="id to use"
        )

        parser.add_argument(
            "type",
            help="type of action",
            type=str,
            required=True | default="confirmation",
            choices=["confirmation", "subscription"],
        )

        parser.add_argument(
            "--watch",
            help="watch files",
            action="store_true",
            default=False,
        )

    def handle(self, *args, **_kwargs):
        logger.info("Running command")
endsnippet

snippet field "Django model field"
text = models.TextField(
    primary_key=False,
    unique=False,
    unique_for_date=False,
    unique_for_month=False,
    unique_for_year=False,
    max_length=8000,
    default=""
    null=False,
    blank=False,
    default="",
    editable=True,
    help_text="Please use the following format: <strong>YYYY-MM-DD</strong>.",
    validators=[validate_even],
)

BinaryField           # A field to store raw binary data. It can be assigned bytes, bytearray, or memoryview.
BooleanField          # A true/false field.
CharField             # A string field, for small- to large-sized strings.
DateField             # A date, represented in Python by a datetime.date instance.
DateTimeField         # A date and time, represented in Python by a datetime.datetime instance.
DecimalField          # A fixed-precision decimal number, represented in Python by a Decimal instance.
DurationField         # A field for storing periods of time - modeled in Python by timedelta
EmailField            # A CharField that checks that the value is a valid email address using EmailValidator.
FileField             # A file-upload field.
FloatField            # A floating-point number represented in Python by a float instance.
ImageField            # Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.
IntegerField          # An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.
GenericIPAddressField # An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4).
PositiveIntegerField  # Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django.
TextField             # A large text field. The default form widget for this field is a Textarea.
URLField              # A CharField for a URL, validated by URLValidator.
UUIDField             # A field for storing universally unique identifiers.


def validate_even(value):
    if value % 2 != 0:
        raise ValidationError(
            _('%(value)s is not an even number'),
            params={'value': value},
        )
endsnippet

snippet templateview "class MyView(TemplateView)"
from django.views.generic.base import TemplateView

class HomePageView(TemplateView):
    template_name = "web/home.html"
    http_method_names = ["get", "post"]

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = Article.objects.all()[:5]
        return context
endsnippet

snippet modelform "forms.ModelForm"
from django import forms
class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'authors']
endsnippet

snippet form_crispy "Crispy form with form helper"
from django import forms

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit, Layout, Div

class ContactForm(forms.Form):
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea())

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper(self)
        self.disable_csrf = True
        self.helper.form_show_labels = False
        self.helper.form_class = "myform"
        self.helper.form_method = "GET"
        self.helper.form_action = reverse('url_name', args=[event.id])
        self.fields["email"].widget.attrs["placeholder"] = "Email"
        self.fields["message"].widget.attrs["placeholder"] = "Message"
        self.fields["message"].widget.attrs["rows"] = 3
        self.fields['to'].initial = "Hello@world.com"
        self.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"
        self.helper.layout = Layout(
            Div("email"),
            Div(
                "message",
                "employees",
                css_class="button-container d-none d-lg-flex",
            ),
            Submit("submit", "Submit", css_class="btn btn-dark")
        )
endsnippet

snippet formview "class MyFormView(FormView)"
from django.views.generic.edit import FormView

class ContactView(FormView):
    template_name = 'myapp/contact.html'
    form_class = ContactForm

    def get_success_url(self):
        return providers.registry.by_id("exist", self.request).get_login_url(
            self.request
        )

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        form.send_email()
        return super().form_valid(form)
endsnippet

snippet "templateview" "class HomePageView(TemplateView):"
from django.views.generic.base import TemplateView

from articles.models import Article

class HomePageView(TemplateView):
    template_name = "home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = Article.objects.all()[:5]
        return context
endsnippet

snippet redirectview "class MyRedirectView(RedirectView):"
from django.shortcuts import get_object_or_404
from django.views.generic.base import RedirectView

from articles.models import Article

class ArticleCounterRedirectView(RedirectView):
    permanent = False
    query_string = True
    pattern_name = 'article-detail'

    def get_redirect_url(self, *args, **kwargs):
        article = get_object_or_404(Article, pk=kwargs['pk'])
        article.update_counter()
        # return "https://foo"
        return super().get_redirect_url(*args, **kwargs)
endsnippet

snippet json_dumps_django "json.dumps(list(qs), cls=DjangoJSONEncoder)"
import json
from django.core.serializers.json import DjangoJSONEncoder
data = json.dumps(list(qs), cls=DjangoJSONEncoder)
endsnippet

snippet createview "class AuthorCreate(CreateView)"
from django.views.generic.edit import CreateView
from django.contrib.auth.mixins import LoginRequiredMixin
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from crispy_forms.layout import Div, Layout
from django.utils import timezone
from myapp.models import Author

class AuthorCreate(LoginRequiredMixin, CreateView):
    model = Author
    fields = ['name']

    # template_name = "jobs/jobposting_new.html"
    # form_class = JobPostingForm
    # success_url = reverse_lazy("jobs-payment")
    # initial = {}

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.helper = FormHelper()
        form.helper.add_input(Submit('submit', 'Create', css_class='btn-primary'))
        form.disable_csrf = True
        form.helper.form_show_labels = False
        form.helper.form_class = "myform"
        form.helper.form_method = "GET"
        form.helper.form_action = reverse('url_name', args=[event.id])
        form.fields["email"].widget.attrs["placeholder"] = "Email"
        form.fields["message"].widget.attrs["placeholder"] = "Message"
        form.fields["message"].widget.attrs["rows"] = 3
        form.fields['to'].initial = "Hello@world.com"
        form.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"

        form.helper.layout = Layout(
            Div("search"),
            Div(
                "glassdoor_rating__gte",
                "funding",
                "employees",
                css_class="button-container d-none d-lg-flex",
            ),
            Submit("submit", "Submit", css_class="btn btn-info")
        )
        return form

    def form_valid(self, form):
        """If the form is valid, redirect to the supplied URL."""
        author = form.save(commit=False)
        author.date = timezone.now()
        author.save()
        return super().form_valid(form)

    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        return self.render_to_response(self.get_context_data(form=form))

    def get_success_url(self):
        """Return the URL to redirect to after processing a valid form."""
        if not self.success_url:
            raise ImproperlyConfigured("No URL to redirect to. Provide a success_url.")
        return str(self.success_url)  # success_url may be lazy
endsnippet


snippet updateview "class AuthorUpdateView(UpdateView)"
from django.views.generic.edit import UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from crispy_forms.layout import Div, Layout
from django.utils import timezone
from myapp.models import Author

class AuthorCreate(LoginRequiredMixin, UpdateView):
    model = Author
    fields = ['name']

    # template_name = "jobs/jobposting_new.html"
    # form_class = JobPostingForm
    # success_url = reverse_lazy("jobs-payment")
    # initial = {}

    def get_initial(self):
        base_initial = super().get_initial()
        base_initial['dataset_request'] = self.object
        base_initial['company_name'] = self.object.company.name
        return base_initial

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.helper = FormHelper()
        form.helper.add_input(Submit('submit', 'Create', css_class='btn-primary'))
        form.disable_csrf = True
        form.helper.form_show_labels = False
        form.helper.form_class = "myform"
        form.helper.form_method = "GET"
        form.helper.form_action = reverse('url_name', args=[event.id])
        form.fields["email"].widget.attrs["placeholder"] = "Email"
        form.fields["message"].widget.attrs["placeholder"] = "Message"
        form.fields["message"].widget.attrs["rows"] = 3
        form.fields['to'].initial = "Hello@world.com"
        form.fields['to'].widget.attrs["class"] = "search-bar form-control form-control-lg"

        form.helper.layout = Layout(
            Div("search"),
            Div(
                "glassdoor_rating__gte",
                "funding",
                "employees",
                css_class="button-container d-none d-lg-flex",
            ),
            Submit("submit", "Submit", css_class="btn btn-info")
        )
        return form

    def form_valid(self, form):
        """If the form is valid, redirect to the supplied URL."""
        author = form.save(commit=False)
        author.date = timezone.now()
        author.save()
        return super().form_valid(form)

    def form_invalid(self, form):
        """If the form is invalid, render the invalid form."""
        return self.render_to_response(self.get_context_data(form=form))

    def get_success_url(self):
        """Return the URL to redirect to after processing a valid form."""
        if not self.success_url:
            raise ImproperlyConfigured("No URL to redirect to. Provide a success_url.")
        return str(self.success_url)  # success_url may be lazy
endsnippet

snippet detailview "class AppDetailView(DetailView)"
from django.views.generic.detail import DetailView

class JobsDetailView(DetailView):
    template_name = "jobs/jobposting_detail.html"
    queryset = JobPosting.valid_jobs.prefetch_related("company")

    def get_context_data(self, *, _=None, **kwargs):  # pylint: disable=arguments-differ
        context = super().get_context_data()
        return context
endsnippet

snippet login_required "@login_required"
from django.contrib.auth.decorators import login_required

@login_required
endsnippet

snippet update_or_create "Person.objects.update_or_create"
obj, created = Person.objects.update_or_create(
    first_name='John', last_name='Lennon',
    defaults={'first_name': 'Bob'},
)
endsnippet

snippet listview "class ArticleList(ListView)"
from django.views.generic.list import ListView
from articles.models import Article

class ArticleListView(ListView):
    model = Article
    # queryset = Article.objects.filter(foo="bar")
    paginate_by = 100  # if pagination is desired

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['now'] = timezone.now()
        return context

    def get_queryset(self):
        return Article.objects.filter(foo="bar")
endsnippet

snippet signal_receiver "Signal receiver function"
# List of common signals
# django.db.models.signals.pre_save
# django.db.models.signals.post_save
# django.core.signals.request_finished
# allauth.account.signals.user_signed_up(request, user)
# allauth.account.signals.user_logged_in(request, user)
# allauth.account.signals.user_logged_out(request, user)

from django.dispatch import receiver

# Listen to signals emitted from any model
@receiver(request_finished)
def my_callback(sender, **kwargs):
    print("Request finished!")

# Listen for signals associated by a specific model
@receiver(request_finished, sender=MyModel)
def my_callback(sender, **kwargs):
    print("Request finished!")
endsnippet

global !p
import px.snippets

def to_snake_case(s):
    return re.sub('(?!^)([A-Z]+)', r'_\1', s).lower()
endglobal

snippet foreign_key "models.ForeignKey()"
`!p snip.rv = to_snake_case(t[1])` = models.ForeignKey(${1:MyModel}, on_delete=models.CASCADE)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet models.ForeignKey "models.ForeignKey()"
foreign_key$1
endsnippet
