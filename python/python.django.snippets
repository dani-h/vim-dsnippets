snippet migration "django migration"
from django.db import migrations

def forwards(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    JobPosting = apps.get_model("jobs", "JobPosting")
    qs = JobPosting.objects.using(db_alias)
    qs.filter(job_urls=[None]).update(job_urls=[])

class Migration(migrations.Migration):
    dependencies = [
        ('jobs', '0033_email_to_use_emailfield'),
    ]

    operations = [
        migrations.RunPython(forwards),
    ]
endsnippet

snippet management_command "django management command"
import logging

from django.core.management.base import BaseCommand

logger = logging.LoggerAdapter(
    logging.getLogger(), extra={
        "app": "myapp",
        "file": __file__,
    }
)

class Command(BaseCommand):
    help = "Command does shit"

    def add_arguments(self, parser):
        parser.add_argument(
            "--id",
            type=int,
            default=1,
            help="id to use"
        )

        parser.add_argument(
            "type",
            help="type of action",
            type=str,
            required=True | default="confirmation",
            choices=["confirmation", "subscription"],
        )

        parser.add_argument(
            "--watch",
            help="watch files",
            action="store_true",
            default=False,
        )

    def handle(self, *args, **_kwargs):
        logger.info("Running command")
endsnippet

snippet field "Django model field"
text = models.TextField(
    primary_key=False,
    unique=False,
    unique_for_date=False,
    unique_for_month=False,
    unique_for_year=False,
    max_length=8000,
    default=""
    null=False,
    blank=False,
    default="",
    editable=True,
    help_text="Please use the following format: <strong>YYYY-MM-DD</strong>.",
    validators=[validate_even],
)

BinaryField           # A field to store raw binary data. It can be assigned bytes, bytearray, or memoryview.
BooleanField          # A true/false field.
CharField             # A string field, for small- to large-sized strings.
DateField             # A date, represented in Python by a datetime.date instance.
DateTimeField         # A date and time, represented in Python by a datetime.datetime instance.
DecimalField          # A fixed-precision decimal number, represented in Python by a Decimal instance.
DurationField         # A field for storing periods of time - modeled in Python by timedelta
EmailField            # A CharField that checks that the value is a valid email address using EmailValidator.
FileField             # A file-upload field.
FloatField            # A floating-point number represented in Python by a float instance.
ImageField            # Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.
IntegerField          # An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.
GenericIPAddressField # An IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4).
PositiveIntegerField  # Like an IntegerField, but must be either positive or zero (0). Values from 0 to 2147483647 are safe in all databases supported by Django.
TextField             # A large text field. The default form widget for this field is a Textarea.
URLField              # A CharField for a URL, validated by URLValidator.
UUIDField             # A field for storing universally unique identifiers.


def validate_even(value):
    if value % 2 != 0:
        raise ValidationError(
            _('%(value)s is not an even number'),
            params={'value': value},
        )
endsnippet

snippet CreateView "class MyView(CreateView)"
from django.views.generic.edit import CreateView

class AuthorCreate(CreateView):
    model = Author
    fields = ["name"]
    # template_name = "myapp/custom_template.html"
endsnippet

snippet TemplateView "class MyView(TemplateView)"
from django.views.generic.base import TemplateView
class HomePageView(TemplateView):
    template_name = "web/home.html"
    http_method_names = ["get", "post"]

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['latest_articles'] = Article.objects.all()[:5]
        return context
endsnippet

snippet modelform "forms.ModelForm"
from django import forms
class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'authors']
endsnippet

snippet form_crispy "Crispy form with form helper"
from django import forms

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit

class ContactForm(forms.Form):
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea())

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper(self)
        self.helper.form_show_labels = False
        self.fields["email"].widget.attrs["placeholder"] = "Email"
        self.fields["message"].widget.attrs["placeholder"] = "Message"
        self.fields["message"].widget.attrs["rows"] = 3
        self.helper.add_input(Submit("submit", "Submit", css_class="btn btn-info"))
endsnippet
