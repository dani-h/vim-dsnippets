global !p
import px.snippets
endglobal

snippet click_command "@click.command()"
import click

@click.command()
@click.option(
    "--directory",
    "-d",
    type=click.Path(exists=True, dir_okay=True, file_okay=False),
    help="Postgres archive directory",
    required=True,
)
@click.option(
    "--number",
    "-n",
    type=click.Path(exists=True, dir_okay=True, file_okay=False),
    help="A number",
    show_default=True,
    default=5,
)
@click.option(
  '--hash-type',
  type=click.Choice(['MD5', 'SHA1'], case_sensitive=False)
)
@click.option(
  '--username',
  prompt=True
)
@click.option(
  '--password',
  prompt=True,
  hide_input=True,
  confirmation_prompt=True,
  envvar="SOME_TOKEN",
)
def clear_postgres_archives(directory, number, hash_type, username, password):
    """
    The documentation for your command here
    """
    pass
    click.secho('Hello World!')
    if some_error:
        raise click.Abort()
endsnippet

snippet click_echo "click.echo(click.style))"
click.secho('Hello World!', fg='green', bold=True)
endsnippet

snippet click_group ""
import click

@click.group()
@click.option('--debug/--no-debug', default=False)
@click.pass_context
def command(ctx, debug):
    # ensure that ctx.obj exists and is a dict (in case `cli()` is called
    # by means other than the `if` block below)
    ctx.ensure_object(dict)

    ctx.obj['DEBUG'] = debug

# cli.command!, not click.command
@command.command()
@click.pass_context
def subcommand(ctx):
    click.secho('Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))
endsnippet

post_jump "px.snippets.expand(snip)"
snippet subcommand ""
click_group$1
endsnippet

post_jump "px.snippets.expand(snip)"
snippet click_subcommand ""
click_group$1
endsnippet

snippet click_exit ""
raise click.Abort()
endsnippet

snippet click_abort ""
raise click.Abort()
endsnippet

snippet click_usage_error ""
raise click.UsageError(message, ctx=None)
endsnippet

snippet click_option ""
@click.option(
  '--n',
  default=1,
  # default=lambda: os.environ.get('USER', ''),
  show_default=True,
)
endsnippet

snippet click_option_boolean ""
@click.option(
    "--force-push/--no-force-push",
    "-f",
    default=False,
    show_default=True,
)
endsnippet

snippet click_option_choice ""
@click.option(
  '--hash-type',
  type=click.Choice(['MD5', 'SHA1'], case_sensitive=False)
  default='MD5',
  show_default=True,
)
endsnippet

snippet click_option_double_confirmation ""
@click.option(
  '--yes',
  is_flag=True,
  callback=abort_if_false,
  expose_value=False,
  prompt='Are you sure you want to drop the db?'
)
endsnippet

snippet click_option_prompt ""
@click.option('--name', prompt=True)
endsnippet

snippet click_option_prompt ""
@click.command()
@click.option('--username', prompt=True,
              default=lambda: os.environ.get('USER', ''),
              show_default='current user')
def hello(username):
    # Only prompts if not specified using --username=billy
    print("Hello,", username)
endsnippet

snippet click_option_password_prompt ""
@click.command()
@click.option('--password', prompt=True, hide_input=True,
              confirmation_prompt=True)
def encrypt(password):
    click.secho('Encrypting password to %s' % password.encode('rot13'))
endsnippet

snippet click_option_env ""
@click.option('--github-token',
              required=True,
              envvar="GITHUB_TOKEN"
              )
endsnippet


snippet click_argument ""
@click.argument('filename')
endsnippet

snippet click_argument_path ""
@click.argument('filename', type=click.Path(exists=True))
endsnippet

snippet click_argument_file ""
@click.argument('input', type=click.File('rb'))
@click.argument('output', type=click.File('wb'))
endsnippet

snippet click_argument_env ""
@click.argument('src', envvar='SRC', type=click.File('r'))
endsnippet

snippet click_argument_varargs ""
@click.command()
@click.argument('src', nargs=-1)
@click.argument('dst', nargs=1)
def copy(src, dst):
    """Move file SRC to DST."""
    for fn in src:
        click.echo('move %s to folder %s' % (fn, dst))
endsnippet

snippet click_option_multi_value ""
@click.command()
@click.option('--message', '-m', multiple=True)
def commit(message):
    click.echo('\n'.join(message))
# $ commit -m foo -m bar
# foo
# bar
endsnippet

snippet click_option_nargs ""
@click.command()
@click.option('--pos', nargs=2, type=float)
def findme(pos):
    click.echo('%s / %s' % pos)

# $ findme --pos 2.0 3.0
endsnippet

snippet click_datetime ""
# The format strings are processed using datetime.strptime, and this consequently
# defines the format strings which are allowed. Parsing is tried using each
# format, in order, and the first format which parses successfully is used.
type=click.DateTime(formats=None)
endsnippet

snippet click_path ""
type=click.Path(
  exists=False,       # if set to true, the file or directory needs to exist for this value to be valid
  file_okay=True,     # controls if a file is a possible value.
  dir_okay=True,      # controls if a directory is a possible value.
  writable=False,     # if true, a writable check is performed.
  readable=True,      # if true, a readable check is performed.
  resolve_path=False, # This means that it’s absolute and symlinks are resolved
  allow_dash=False,   # If this is set to True, a single dash to indicate standard streams is permitted.
)
endsnippet

snippet click_file ""
# The file is automatically closed once the context tears down (after the
# command finished working).
type=click.File(
  mode='r',
  encoding=None,
  errors='strict',
  lazy=None,
  atomic=False
)
endsnippet

snippet click_prompt_continue ""
if click.confirm('Do you want to continue?'):
    click.echo('Well done!')
endsnippet

snippet click_prompt_abort ""
click.confirm('Do you want to continue?', abort=True)
endsnippet

snippet click_slug ""
from click_params import SLUG
@click.option('--id', type=SLUG)
endsnippet

snippet click_domain ""
from click_params import DOMAIN
@click.option('-d', '--domain', type=DOMAIN)
endsnippet

snippet click_url ""
from click_params import URL
@click.option('-u', '--url', type=URL)
endsnippet

snippet click_email ""
from click_params import EMAIL
@click.option('-e', '--email', type=EMAIL)
endsnippet

snippet click_invoke ""
# Context.invoke() merely invokes another command with the arguments you provide
# as a caller, whereas Context.forward() fills in the arguments from the current
# command.
ctx.invoke(other_command, count=42)
ctx.forward(other_command)
endsnippet

post_jump "px.snippets.expand(snip)"
snippet click_call ""
click_invoke$1
endsnippet

snippet click_verbose ""
click.option(
    "--verbose/--no-verbose",
    "-v",
    default=False,
    show_default=True,
)
endsnippet

snippet click_prompt
click.prompt(
  text,
  default=None, # the default value to use if no input happens. If this is not given it will prompt until it’s aborted.
  hide_input=False,
  confirmation_prompt=False,
  type=None,
  value_proc=None, # if this parameter is provided it’s a function that is invoked instead of the type conversion to convert a value
  prompt_suffix=': ',
  show_default=True,
  err=False,
  show_choices=True
)
endsnippet

snippet click_prompt_password
click.prompt(text, hide_input=True)
endsnippet

snippet click_edit
MARKER = '# Everything below is ignored\n'
message = click.edit(text='\n\n' + MARKER, editor=None, env=None, require_save=True, extension=".txt", filename=None)
if message is not None:
    return message.split(MARKER, 1)[0].rstrip('\n')
endsnippet

snippet click_stdin
sys.stdin.read()
# or json.load()
endsnippet

snippet click_current_context ""
click.get_current_context().info_name
endsnippet
