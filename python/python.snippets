global !p
from ultisnips_helpers import *
import px.snippets
endglobal

snippet breakpoint() "breakpoint()"
breakpoint()
${1:}
endsnippet

snippet def "def fn(args):"
def ${1:fn}():
    ${2:pass}
endsnippet

snippet __name__ "if __name__ == '__main__'"
if __name__ == '__main__':
    ${1:main()}
endsnippet

post_jump "px.snippets.expand(snip)"
snippet if_main "if __name__ == '__main__'"
__name__$1
endsnippet

snippet pylint_disable_line_too_long "# pylint: disable=line-too-long"
# pylint: disable=line-too-long
endsnippet

snippet pylint_disable_redefined_outer_name "# pylint: disable=redefined-outer-name"
# pylint: disable=redefined-outer-name
endsnippet

snippet pylint_disable_unused_argument "# pylint: disable=unused-argument"
# pylint: disable=unused-argument
endsnippet

snippet pylint_disable_broad_except "# pylint: disable=broad-except"
# pylint: disable=broad-except
endsnippet

snippet pylint_disable_comparison_with_callable "# pylint: disable=comparison-with-callable"
# pylint: disable=comparison-with-callable
endsnippet

snippet pylint_arguments_differ "# pylint: disable=arguments-differ"
# pylint: disable=arguments-differ
endsnippet

snippet mypy_ignore "type: ignore"
# type: ignore
endsnippet

snippet logger "Instatiate a logger"
import logging
logger = logging.LoggerAdapter(logging.getLogger(), extra={
  "app": "jobs",
  "__name__": __name__,
})
endsnippet

snippet call "assert a chained call was made"
expected_call = (
    call(some_var="value")
    .method(foo="bar")
    .other_method().new()
)
assert mock.mock_calls == expected_call.call_list()
# alternatively
assert expected_call in mock.mock_calls
endsnippet

snippet ansible_debug_log ""
with open("/tmp/ansible-debug.log", "a") as f:
    print("", file=f)
endsnippet

snippet random_int "Random integer in range between a - b"
import random
random.randint(a, b)
endsnippet
