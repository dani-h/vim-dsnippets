global !p
from ultisnips_helpers import *
import px.snippets
endglobal

post_jump "clean_imports(snip)"
snippet argparse "declare argparse"
import argparse

parser = argparse.ArgumentParser()

# Positional arguments
parser.add_argument('positional_argument', type=str, help='helpful text...')

# Optional positonal arguments
parser.add_argument(
    'requirements_txt',
    type=str,
    help='Path to the requirements.txt file',
    default='requirements.txt',
    nargs='?'
)

# Flag argument
parser.add_argument('--flag-argument', type=str, help='helpful text...')
parser.add_argument('--flag-boolean', action='store_true', help='enable a boolean value')
parser.add_argument('--flag-boolean-negative', action='store_false', help='--no-feature')
parser.add_argument('--flag-default', type=str, default='/boot', help='The boot directory to clean')

# Parse and read args
args = parser.parse_args()
print(args.positional_argument)
print(args.flag_argument)
endsnippet

post_jump "clean_imports(snip)"
snippet tmpdir "tempfile.TemporaryDirectory"
import tempfile

with tempfile.TemporaryDirectory as tmp_dir:
    with open('workfile') as f:
        f.write("Hello")
endsnippet

post_jump "clean_imports(snip)"
snippet subprocess.run "subprocess.run"
import subprocess

cmd = "grep 'foo.html' core --include '*.py' -r -n"
result = subprocess.run(
  cmd,
  shell=True,
  check=True,
  stdout=subprocess.PIPE,
  executable="/bin/zsh",
)
output = result.stdout.decode("utf-8").strip() # decode & strip newlines
endsnippet

post_jump "clean_imports(snip)"
snippet testcase "class MyTest(TestCase):"
from unittest import TestCase
from django.test import TestCase
from unittest import skip


class SomeClass(TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def tearDown(self):
        self.widget.dispose()

    @classmethod
    def setUpClass(cls):
        cls._connection = createExpensiveConnectionObject()

    @classmethod
    def tearDownClass(cls):
        cls._connection.destroy()

    def test_subtest(self):
        for i in range(0, 6):
            with self.subTest(i=i):
                self.assertEqual(i % 2, 0)

    @unittest.skip("demonstrating skipping")
    def test_skip(self):
        pass
endsnippet

post_jump "px.snippets.expand(snip)"
snippet testclass "class MyTest(TestCase):"
testcase$1
endsnippet
