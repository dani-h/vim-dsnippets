global !p
from ultisnips_helpers import *
import px.snippets
endglobal

post_jump "clean_imports(snip)"
snippet argparse "declare argparse"
import argparse

parser = argparse.ArgumentParser()

# Positional arguments
parser.add_argument('positional_argument', type=str, help='helpful text...')

# Optional positonal arguments
parser.add_argument(
    'requirements_txt',
    type=str,
    help='Path to the requirements.txt file',
    default='requirements.txt',
    nargs='?'
)

# Flag argument
parser.add_argument('--flag-argument', type=str, help='helpful text...')
parser.add_argument('--flag-boolean', action='store_true', help='enable a boolean value')
parser.add_argument('--flag-boolean-negative', action='store_false', help='--no-feature')
parser.add_argument('--flag-default', type=str, default='/boot', help='The boot directory to clean')

# Parse and read args
args = parser.parse_args()
print(args.positional_argument)
print(args.flag_argument)
endsnippet

post_jump "clean_imports(snip)"
snippet tmp_dir "tempfile.TemporaryDirectory"
import tempfile
with tempfile.TemporaryDirectory(prefix=None, suffix=None) as tmpdirname:
    print('created temporary directory', tmpdirname)

with tempfile.TemporaryDirectory as tmp_dir:
    with open('workfile') as f:
        f.write("Hello")
endsnippet

post_jump "clean_imports(snip)"
snippet subprocess.run "subprocess.run"
import subprocess

cmd = "grep 'foo.html' core --include '*.py' -r -n"
result = subprocess.run(
  cmd,
  shell=True,
  check=True,
  stdout=subprocess.PIPE,
  executable="/bin/zsh",
)
output = result.stdout.decode("utf-8").strip() # decode & strip newlines
endsnippet

snippet urlparse "urllib.parse.urlparse"
from urllib.parse import urlparse
result = urlparse("ssh://git@gitlab.foo.com:22222/project/repo.git")
# result.hostname = 'gitlab.foo.com'
# result.path     = '/project/repo.git'
endsnippet

snippet file_exists "os.path.isfile(fname)"
import os.path
os.path.isfile(fname)
endsnippet

snippet home_dir ""
from pathlib import Path
home = str(Path.home())
endsnippet

snippet cwd ""
from pathlib import Path
import os
Path(os.getcwd()).name
endsnippet


snippet walk ""
for root, dirs, files in os.walk(dir, topdown=True):
    # Modifying dirs in-place will prune the (subsequent) files and directories
    # visited by os.walk
    # dirs[:] = [d for d in dirs if d not in exclude]
    for f in files:
        p = Path(root) / f
        print(p)
endsnippet

snippet context_manager ""
from contextlib import contextmanager

@contextmanager
def managed_resource(*args, **kwds):
    # Code to acquire resource, e.g.:
    resource = acquire_resource(*args, **kwds)
    try:
        yield resource
    finally:
        # Code to release resource, e.g.:
        release_resource(resource)

# >>> with managed_resource(timeout=3600) as resource:
endsnippet

snippet uuid "Create a v4 uuid"
import uuid
uuid.uuid4()
# UUID('bd65600d-8669-4903-8a14-af88203add38')
# str(uuid.uuid4())
endsnippet

snippet tarfile_create "Create a tarfile"
# Option 1:
import tarfile
tar = tarfile.open("sample.tar", "w"|"w:gz"|"w:bz2"|"w:xz")
for name in ["foo", "bar", "quux"]:
    tar.add(name)
tar.close()

# Option 2:
import shutil
import os
import tempfile

with tempfile.TemporaryDirectory() as tmp:
    os.chdir(tmp)
    compressed_file = shutil.make_archive(
        base_name=slugify(product.name),
        format="gztar|zip|bztar|xztar|tar",
        root_dir=path,
    )
endsnippet
