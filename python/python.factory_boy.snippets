global !p
from ultisnips_python import *
endglobal


post_jump "clean_imports(snip)"
snippet factory_boy_class "class TargetingEntryFactory(factory.django.DjangoModelFactory)"
class EntryFactory(factory.django.DjangoModelFactory):
    class Meta:
        model = Entry
        # Fields whose name are passed in this list will be used to perform a
        # Model.objects.get_or_create() instead of the usual
        # Model.objects.create():
        django_get_or_create = ('user', 'tags_list')

    # Creates a dependent object (foreign key or one to one field)
    tags_list = factory.SubFactory(TagsListFactory)

    # Create a field that depends on other fields
    @factory.lazy_attribute
    def email(self):
        return f"{self.name}@domain.com"

    # Alternatively use a lambda
    email = factory.LazyAttribute(lambda o: '%s@example.com' % o.username)

    choice = factory.Faker('random_element', elements=my_list)

    # Many-to-many relation
    @factory.post_generation
    def countries(self, create, models, **kwargs):
        # Simple build, do nothing.
        if not create:
            return

        # But when UserFactory.create(groups=(group1, group2, group3)) is called, the
        # groups declaration will add passed in groups to the set of groups for the
        # user.
        if models:
            # A list of groups were passed in, use them
            for model in models:
                self.countries.add(model)
        # If no models are passed as argument create default ones
        else:
            self.countries.add(CountryFactory())

# When calling UserFactory() or UserFactory.build(), no group binding will be created.

endsnippet

snippet factory_faker_random_int "factory.Faker('random_int')"
share_cost_as_amount = factory.Faker('random_int', min=10, max=20)
endsnippet

snippet factory_faker_date_between "factory.Faker('date_between')"
start_date = factory.Faker('date_between', start_date='-30d', end_date='-10d')
endsnippet

snippet factory_faker_lorem ""
# :param nb_sentences: around how many sentences the paragraph
# :param variable_nb_sentences: set to false if you want exactly nb
paragraph = factory.Faker('lorem', nb_sentences=3, variable_nb_sentences=True)
endsnippet

snippet factory_faker_random_element ""
choice = factory.Faker('random_element', elements=['a', 'b', 'c', 'd'])
endsnippet

snippet factory_faker_random_elements ""
# https://faker.readthedocs.io/en/master/providers/baseprovider.html?highlight=random_elements#faker.providers.BaseProvider.random_elements
# Set unique to False for random sampling with replacement, and set unique to True for random sampling without replacement.
factory.Faker('random_elements',
    elements=OrderedDict([
        ("variable_1", 0.5),        # Generates "variable_1" 50% of the time
        ("variable_2", 0.2),        # Generates "variable_2" 20% of the time
        ("variable_3", 0.2),        # Generates "variable_3" 20% of the time
        ("variable_4": 0.1),        # Generates "variable_4" 10% of the time
    ]),
    unique=False
)
endsnippet
