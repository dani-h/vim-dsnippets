snippet console.log('var',var) "console.log(str, str)"
console.log('${1}', $1);
endsnippet

snippet console.log('var',JSON.stringify(var,null,2)) "console.log(str, JSON.stringify(var, null, 2))"
console.log('${1}', JSON.stringify($1, null, 2));
endsnippet

snippet tslint:disable-next-line "tslint:disable-next-line"
// tslint:disable-next-line
endsnippet

snippet if(require.main===module) "main method"
if (require.main === module) {
  main();
}
endsnippet

snippet tslint:disable "tslint:disable"
// tslint:disable no-unused-expression
endsnippet

snippet tslint:disable-next-line "tslint:disable-next-line"
// tslint:disable-next-line no-unused-expression
endsnippet

snippet class_react_component ""
type MyComponentProps {
  myVar = string;
}

export class MyComponent extends React.Component<MyComponentProps> {
  static contextType = StateContext;
  state = {
    stateVal: ''
  };

  render() {
    const { propVal } = this.props;
    const { stateVal } = this.state;
    return (
      <div>
      </div>
    );
  }
}
endsnippet

snippet setState ""
this.setState(prevState => {
  return {
    checked: !prevState.checked
  };
});
endsnippet


snippet props_types ""
type SomeProps = {
  audienceGroup: MyType[];
};
endsnippet

snippet axios_defaults ""
import axios from 'axios';

const client = axios.create({
  baseURL: '/api',
  paramsSerializer: qs.stringify,
  headers: {
    'Token': `${token}`
  }
});
endsnippet
